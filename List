void main (){
List<int> numbers = [1, 2, 3, 4, 5];
List<int> doubledNumbers = numbers.map((number) => number * 2).toList();
List<int> doubledNumbers1 = numbers.where((element) => isEven).toList(); 
List<int> doubledNumbers2 = filter<int>(isEven,numbers);
final doubledNumbers3 = map<int>(doubleit,numbers);

}


num add(int a, int b) {
  return a + b;
}

num subtract(int a, int b) {
  return a - b;
}

num multiply(int a, int b) {
  return a * b;
}

num divide(int a, int b) {
  return a / b;
}

//List of int value sum in singe value
void main() { 
   Test c = Test(); 
 c.test1([1,2,2,3,4,4,5,5,6,7]);
 // print(c);
} 
class Test { 
    void test1(List<int> name) { 
     // var f = name.sum; 
        
          int d = name.reduce((value, element) => value + element ?? 0);

      print(d);
     // return f;
   } 
   
   // List Sting values add in single string
   void main() { 
   Test c = Test(); 
 String v = c.test1(['V','e','n','k','a','t','e','s','a','n']);
  print('my name is $v');
} 
class Test { 
    String test1(List<String> name) { 
      var f = name.join(''); 
       return f;
   } 
}
//Single string into List of String
void main() { 
   Test c = Test(); 
 List<String> v = c.test1('Venkatesan');
  print('my name is $v');
} 
class Test { 
    List<String> test1(String name) { 
      var f = name.split(''); 
    
       return f;
   } 
}
//update 
void main() { 
   StringToList c = StringToList(); 
 List<String> v = c.test1('Ven,kates,an',',');
  print('my name is $v');
} 

class StringToList {
  List<String> test1(String name , String split,) {
    var f = name.split(split);
    return f;
  }
 
}




//Getter seter
void main() {
  Math math = Math();

  print(math.cm);
  math.cm = 14;
  print(math.cm);
}

class Math {
  double _cm = 15.0;

  double get cm => _cm;

  set cm(double cm1) {
    _cm = cm1;
  }
}


//abstract

void main() {
  
  print(Math.a+Math.b);
}


abstract class Math{
  
  static final a = 20;
  static final b = 14;
  
}



 a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
and write a program that prints out all the elements of the list that are less than 5.

void main() {
 
   List<int> a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89];
    print('For loop');
  for (int i = 0; i < a.length; i++) {
    if(a[i]>5){
      print(a[i]);
    }
    

  }
   print('For each');
  a.forEach((number) {
    if(number>5){
      print(number);
                }
  });
  
   print('high order ');
   List<int> filteredNumbers = a.where((number) => number > 5).toList();
  print(filteredNumbers);
  
  filteredNumbers.forEach((number) {
    print(number);
  });
      
}







Summary of List Filtering and Transformation Methods:
Method
Description
where
Filters the list based on a condition and returns a new iterable.
retainWhere
Retains elements in the list that satisfy the condition and removes the rest (modifies the list in place).
firstWhere
Returns the first element that satisfies the condition, with an optional default value if no match is found.
lastWhere
Returns the last element that satisfies the condition, with an optional default value if no match is found.
map
Transforms each element in the list based on a provided function, returning a new iterable.
expand
Expands each element into an iterable, flattening the result into a single iterable.
any
Checks if any element satisfies the given condition.
every
Checks if every element satisfies the given condition.
contains
Checks if a specific element exists in the list.







