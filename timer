

import UIKit



class TimerSettings1: UIViewController,UITextFieldDelegate,UIScrollViewDelegate

{
    
    let dateFormatter = DateFormatter()
    
    let locale = NSLocale.current
    
    var datePicker : UIPickerView!
    
    var toolbar = UIToolbar()
    
    var back :UIButton = UIButton()
    
    var sentstatus = String()
    
    var contentview : UIView = UIView()
    
    var toggleStatus:String! = String()
    
    var onOff : UILabel = UILabel()
    
    
    
    var userID:String! = String()
    
    var switchStatus:String! = String()
    
    var controllerID:Int! = Int()
    
    var settingsid:Int! = Int()
    
    var modelid : Int = Int()
    
    var subSettingsID:Int! = Int()
    
    
    
    var jsonResult : NSDictionary = NSDictionary()
    
    var capacitor : NSArray = NSArray()
    
    var sendToggle : NSMutableArray = NSMutableArray()
    
    
    
    var delay:String! = String()
    
    
    
    var delayTemp:String! = String()
    
    var toggleTempStatus:String! = String()
    
    var hourRowValue : Int = 0
    
    var minsRowValue : Int = 0
    
    var secsRowValue : Int = 0
    
    
    
    var hour:Int = 0
    
    var minutes:Int = 0
    
    var seconds:Int = 0
    
    var shareduserId: Int! = Int()
    
    
    
    var modeofoperation = UserDefaults.standard.string(forKey:
                                                        "OperationMode")!
    
    
    
    var maximunrunview = UIView()
    
    var maximunrunsentbtn = UIButton()
    
    var maximunrunlbl = UILabel()
    
    var startcapacitiorstatus = 0
    
    var onoffmaximunrunstr = String()
    
    var maximunrunswitch = UIButton()
    
    var cyclicview = UIView()
    
    var cyclicviewsentbtn = UIButton()
    
    var cycliclbl = UILabel()
    
    var cyclicviewswitch = UIButton()
    
    var changeoverview = UIView()
    
    var changeoverviewsentbtn = UIButton()
    
    var changeoverlbl = UILabel()
    
    var changeoverviewswitch = UIButton()
    
    var delayTimerview = UIView()
    
    var delayTimerlbl = UILabel()
 var dryoffTimerlbl = UILabel()
 
    
    var delayTimersentbtn = UIButton()
    
    var txtdelayTimer = UITextField()
 var txtdryoffTimer = UITextField()
    
    var nightlightview = UIView()
    
    var nightlightlbl = UILabel()
    
    var nightlightsentbtn = UIButton()
    
    var nightlightswitch = UIButton()
    
    var RTCview = UIView()
    
    var RTCsentbtn = UIButton()
    
    var RTClbl = UILabel()
    
    var RTCstatus = 0
    
    var RTCswitch = UIButton()
    
    var cycliconoofflblview = UIView()
    
    var cycliconolbl = UILabel()
    
    var cyclicofflbl = UILabel()
    
    var cycliconooffview = UIView()
    
    var txtcyclicon = UITextField()
    
    var txtcyclicoff = UITextField()
    
    var cyclicoooffsend = UIButton()
    
    var nightonoofflblview = UIView()
    
    var nightonolbl = UILabel()
    
    var nightofflbl = UILabel()
    
    var nightonooffview = UIView()
    
    var txtnighton = UITextField()
    
    var txtnightoff = UITextField()
    
    var nightoooffsend = UIButton()
    
    var scrollView : UIScrollView = UIScrollView()
    
    var togglests1 = "0"
    
    var togglests2 = "0"
    
    var togglests3 = "0"
    
    var togglests4 = "0"
    
    var toggleststr1 = String()
    
    var toggleststr2 = String()
    
    var toggleststr3 = String()
    
    var toggleststr4 = String()
    
    var onDelayTimestr = String()
    
    var cycliconstr = String()
    
    var cyclicoffstr = String()
    
    var cycliconoffstr = String()
    
    var nightlightonoffstr = String()
    
    var nightlightfromstr = String()
    
    var nightlighttostr = String()
    
    var rtcstr =  String()
    
    var p1onstr = String()
    
    var p2onstr = String()
    
    var p3onstr = String()
    
    var p4onstr = String()
    
    var p1offstr = String()
    
    var p2offstr = String()
    
    var p3offstr = String()
    
    var p4offstr = String()
    
    var type =  String()
    
    var onDelayTime = String()
    
    var cyclicon = String()
    
    var cyclicoff = String()
    
    var cycliconoff = String()
    
    var nightlightonoff = String()
    
    var nightlightfrom = String()
    
    var nightlightto = String()
    
    var rtc =  String()
    
    var p1on = String()
    
    var p2on = String()
    
    var p3on = String()
    
    var p4on = String()
    
    var p1off = String()
    
    var p2off = String()
    
    var p3off = String()
    
    var p4off = String()
    
    var sentsms = String()
    
    var headermaximumlbl = UILabel()
    
    var headernightRtclbl = UILabel()
    
    var headerRTClbl = UILabel()
    
    var headercycliclbl = UILabel()
    
    var rtconoofflblview = UIView()
    
    var rtconolbl = UILabel()
    
    var rtcofflbl = UILabel()
    
    var rtctimer1view = UIView()
    
    var txtrtctimer1on = UITextField()
    
    var txtrtctimer1off = UITextField()
    
    var rtctimer1send = UIButton()
    
    var rtctimer2view = UIView()
    
    var txtrtctimer2on = UITextField()
    
    var txtrtctimer2off = UITextField()
    
    var rtctimer2send = UIButton()
    
    var rtctimer3view = UIView()
    
    var txtrtctimer3on = UITextField()
    
    var txtrtctimer3off = UITextField()
    
    var rtctimer3send = UIButton()
    
    var rtctimer4view = UIView()
    
    var txtrtctimer4on = UITextField()
    
    var txtrtctimer4off = UITextField()
    
    var rtctimer4send = UIButton()
    
    var msgbtn = UIButton()
    
    var Receivedata = String()
    
    var Mqttcall = mqttclass()
    
    var dryrunrstview = UIView()
    
    var dryrstsend = UIButton()
    
    var txtdryrsttxtm2 = UITextField()
    
    var txtdryrsttxtm1 = UITextField()
    
    var dryrsttxtview = UIView()
    
    var dryrstm1lbl = UILabel()
    
    var dryrunm1str = String()
    
    var dryrunm2str = String()
    
    var dryrunm1 = String()
    
    var dryrunm2 = String()
    
    //MARK:- System Function
    
    override func viewDidLoad()
    
    {
        
        super.viewDidLoad()
        
        
        
        get()
        
        view.backgroundColor = .white
        
        let namImjVar: UIImage = UIImage(named: "niagara_logo.png")!
        
        let logoimageView = UIImageView(image: namImjVar)
        
        logoimageView.backgroundColor = .white
        
        logoimageView.contentMode = .center
        
        logoimageView.contentMode = .scaleAspectFit
        
        logoimageView.translatesAutoresizingMaskIntoConstraints = false
        
        view.addSubview(logoimageView)
        
        
        
        
        
        if #available(iOS 11.0, *)
            
        {
            
            let guide = self.view.safeAreaLayoutGuide
            
            logoimageView.topAnchor.constraint(equalTo:
                                                guide.topAnchor).isActive = true
            
            logoimageView.heightAnchor.constraint(equalToConstant:
                                                    50).isActive = true
            
        }
        
        else
        
        {
            
            NSLayoutConstraint(item: logoimageView, attribute: .top,
                               relatedBy: .equal, toItem: view, attribute: .top, multiplier: 1.0,
                               constant: 0).isActive = true
            
            logoimageView.heightAnchor.constraint(equalToConstant:
                                                    65).isActive = true
            
        }
        
        
        
        let leadConstraint = NSLayoutConstraint(item: logoimageView,
                                                attribute: NSLayoutConstraint.Attribute.leading, relatedBy:
                                                    NSLayoutConstraint.Relation.equal, toItem: view, attribute:
                                                    NSLayoutConstraint.Attribute.leading, multiplier: 1, constant: 0)
        
        
        
        let trailConstraint = NSLayoutConstraint(item: logoimageView,
                                                 attribute: NSLayoutConstraint.Attribute.trailing, relatedBy:
                                                    NSLayoutConstraint.Relation.equal, toItem: view, attribute:
                                                    NSLayoutConstraint.Attribute.trailing, multiplier: 1, constant: 0)
        
        
        
        NSLayoutConstraint.activate([leadConstraint, trailConstraint])
        
        
        
        
        
        let header : UILabel = UILabel()
        
        header.text = "Timer Settings "
        
        header.font = Font.textfieldFont
        
        header.textAlignment = .center
        
        header.textColor = .white
        
        header.adjustsFontSizeToFitWidth = true
        
        header.backgroundColor = colorcode.headerbgcolor
        
        view.addSubview(header)
        
        header.translatesAutoresizingMaskIntoConstraints = false
        
        
        
        let lbltopConstraint = NSLayoutConstraint(item: header,
                                                  attribute: NSLayoutConstraint.Attribute.bottom, relatedBy:
                                                    NSLayoutConstraint.Relation.equal, toItem: logoimageView, attribute:
                                                    NSLayoutConstraint.Attribute.bottom, multiplier: 1, constant:
                                                    namImjVar.size.height)
        
        
        
        let lblleadConstraint = NSLayoutConstraint(item: header,
                                                   attribute: NSLayoutConstraint.Attribute.leading, relatedBy:
                                                    NSLayoutConstraint.Relation.equal, toItem: view, attribute:
                                                    NSLayoutConstraint.Attribute.leading, multiplier: 1, constant: 0)
        
        
        
        let lbltrailConstraint = NSLayoutConstraint(item: header,
                                                    attribute: NSLayoutConstraint.Attribute.trailing, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: view, attribute:
                                                        NSLayoutConstraint.Attribute.trailing, multiplier: 1, constant: 0)
        
        
        
        let lblheightConstraint = NSLayoutConstraint(item: header,
                                                     attribute: NSLayoutConstraint.Attribute.height, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                        NSLayoutConstraint.Attribute.notAnAttribute, multiplier: 1, constant:
                                                        50)
        
        
        
        NSLayoutConstraint.activate([lbltopConstraint,lblleadConstraint,
                                     lbltrailConstraint, lblheightConstraint])
        
        
        
        let backimg = UIImage(named: "backward-arrow.png") as UIImage?
        
        back.setBackgroundImage(backimg, for: .normal)
        
        back.layoutIfNeeded()
        
        back.subviews.first?.contentMode = .scaleAspectFit
        
        back.subviews.last?.contentMode = .left
        
        back.translatesAutoresizingMaskIntoConstraints = false
        
        back.addTarget(self, action: #selector(backaction(sender:)),
                       for: .touchUpInside)
        
        view.addSubview(back)
        
        
        
        let backtopConstraint = NSLayoutConstraint(item: back,
                                                   attribute: NSLayoutConstraint.Attribute.top, relatedBy:
                                                    NSLayoutConstraint.Relation.equal, toItem: header, attribute:
                                                    NSLayoutConstraint.Attribute.top, multiplier: 1, constant: 5)
        
        
        
        let backleadConstraint = NSLayoutConstraint(item: back,
                                                    attribute: NSLayoutConstraint.Attribute.leading, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: view, attribute:
                                                        NSLayoutConstraint.Attribute.leading, multiplier: 1, constant: 0)
        
        
        
        let backtrailConstraint = NSLayoutConstraint(item: back,
                                                     attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                        NSLayoutConstraint.Attribute.width, multiplier: 1, constant: 80)
        
        
        
        let backheightConstraint = NSLayoutConstraint(item: back,
                                                      attribute: NSLayoutConstraint.Attribute.height, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                        NSLayoutConstraint.Attribute.notAnAttribute, multiplier: 1, constant:
                                                        40)
        
        
        
        NSLayoutConstraint.activate([backtopConstraint,backleadConstraint,
                                     backtrailConstraint, backheightConstraint])
        
        
        
        let hiddenkimg = UIImage(named: "sms_my.png") as UIImage?
        
        msgbtn.setBackgroundImage(hiddenkimg, for: .normal)
        
        msgbtn.setImage(hiddenkimg, for: .normal)
        
        msgbtn.translatesAutoresizingMaskIntoConstraints = false
        
        msgbtn.addTarget(self, action:
                            #selector(messageReader(sender:)), for: .touchUpInside)
        
        view.addSubview(msgbtn)
        
        let msgbtntopConstraint = NSLayoutConstraint(item: msgbtn,
                                                     attribute: NSLayoutConstraint.Attribute.bottom, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: header, attribute:
                                                        NSLayoutConstraint.Attribute.bottom, multiplier: 1, constant: -50)
        
        
        
        let msgbtnleadConstraint = NSLayoutConstraint(item: msgbtn,
                                                      attribute: NSLayoutConstraint.Attribute.trailing, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: view, attribute:
                                                        NSLayoutConstraint.Attribute.trailing, multiplier: 1, constant: -1)
        
        
        
        let msgbtntrailConstraint = NSLayoutConstraint(item: msgbtn,
                                                       attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                        NSLayoutConstraint.Attribute.width, multiplier: 1, constant: 50)
        
        
        
        let msgbtnheightConstraint = NSLayoutConstraint(item: msgbtn,
                                                        attribute: NSLayoutConstraint.Attribute.height, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 50)
        
        
        
        NSLayoutConstraint.activate([msgbtntopConstraint,msgbtnleadConstraint,
                                     msgbtntrailConstraint, msgbtnheightConstraint])
        
        
        
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        
        scrollView.delegate = self
        
        scrollView.contentSize.height = 1100
        
        //scrollView.backgroundColor = UIColor(red: 31/255, green:
        //96/255.0, blue: 150/255.0, alpha: 1.0)
        
        view.addSubview(scrollView)
        
        
        
        let scrollTopConstraint = NSLayoutConstraint(item: scrollView,
                                                     attribute: NSLayoutConstraint.Attribute.top, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: header, attribute:
                                                        NSLayoutConstraint.Attribute.top, multiplier: 1, constant: 50)
        
        
        
        let scrollLeadConstraint = NSLayoutConstraint(item:
                                                        scrollView, attribute: NSLayoutConstraint.Attribute.leading,
                                                      relatedBy: NSLayoutConstraint.Relation.equal, toItem: view, attribute:
                                                        NSLayoutConstraint.Attribute.leading, multiplier: 1, constant: 0)
        
        
        
        let scrollTrailConstraint = NSLayoutConstraint(item:
                                                        scrollView, attribute: NSLayoutConstraint.Attribute.trailing,
                                                       relatedBy: NSLayoutConstraint.Relation.equal, toItem: view, attribute:
                                                        NSLayoutConstraint.Attribute.trailing, multiplier: 1, constant: 0)
        
        
        
        let scrollHeightConstraint = NSLayoutConstraint(item:
                                                            scrollView, attribute: NSLayoutConstraint.Attribute.bottom, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: view, attribute:
                                                            NSLayoutConstraint.Attribute.bottom, multiplier: 1, constant:0)
        
        
        
        NSLayoutConstraint.activate([scrollTopConstraint,scrollLeadConstraint,
                                     scrollTrailConstraint, scrollHeightConstraint])
        
        
        
        //contentview.backgroundColor = UIColor(red: 220/255, green:
        //220/255.0, blue: 220/255.0, alpha: 1.0)
        
        contentview.backgroundColor = UIColor.white
        
        contentview.translatesAutoresizingMaskIntoConstraints = false
        
        scrollView.addSubview(contentview)
        
        
        
        let cscrollTopConstraint = NSLayoutConstraint(item:
                                                        contentview, attribute: NSLayoutConstraint.Attribute.top, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: scrollView, attribute:
                                                        NSLayoutConstraint.Attribute.top, multiplier: 1, constant: 0)
        
        
        
        let cscrollLeadConstraint = NSLayoutConstraint(item:
                                                        contentview, attribute: NSLayoutConstraint.Attribute.leading,
                                                       relatedBy: NSLayoutConstraint.Relation.equal, toItem: view, attribute:
                                                        NSLayoutConstraint.Attribute.leading, multiplier: 1, constant: 0)
        
        
        
        let cscrollTrailConstraint = NSLayoutConstraint(item:
                                                            contentview, attribute: NSLayoutConstraint.Attribute.trailing,
                                                        relatedBy: NSLayoutConstraint.Relation.equal, toItem: view, attribute:
                                                            NSLayoutConstraint.Attribute.trailing, multiplier: 1, constant: 0)
        
        
        
        let cscrollHeightConstraint = NSLayoutConstraint(item:
                                                            contentview, attribute: NSLayoutConstraint.Attribute.bottom,
                                                         relatedBy: NSLayoutConstraint.Relation.equal, toItem:view, attribute:
                                                            NSLayoutConstraint.Attribute.bottom, multiplier: 1, constant:0)
        
        
        
        NSLayoutConstraint.activate([cscrollTopConstraint,cscrollLeadConstraint,
                                     cscrollTrailConstraint, cscrollHeightConstraint])
        
        self.Refresh()
        
        
        
    }
    
    func Refresh()
    
    {
        
        
        
        headercycliclbl.backgroundColor = colorcode.bgcolor
        
        headercycliclbl.text = "Cyclic Timer"
        
        headercycliclbl.textAlignment = .center
        
        headercycliclbl.font = Font.headerFont
        
        headercycliclbl.textColor = UIColor.white
        
        headercycliclbl.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(headercycliclbl)
        
        
        
        let headercycliclbltopConstraint = NSLayoutConstraint(item:
                                                                headercycliclbl, attribute: NSLayoutConstraint.Attribute.top,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                              attribute: NSLayoutConstraint.Attribute.top, multiplier: 1, constant:
                                                                0)
        
        
        
        let headercycliclblleadConstraint = NSLayoutConstraint(item:
                                                                headercycliclbl, attribute: NSLayoutConstraint.Attribute.leading,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                               attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                               constant: 0)
        
        
        
        let headercycliclbltrailConstraint = NSLayoutConstraint(item:
                                                                    headercycliclbl, attribute: NSLayoutConstraint.Attribute.trailing,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                                attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                                constant: 0)
        
        
        
        let headercycliclblheightConstraint = NSLayoutConstraint(item:
                                                                    headercycliclbl, attribute: NSLayoutConstraint.Attribute.height,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 30)
        
        
        
        NSLayoutConstraint.activate([headercycliclbltopConstraint,headercycliclblleadConstraint,
                                     headercycliclbltrailConstraint,headercycliclblheightConstraint])
        
        
        
        cyclicview.backgroundColor = UIColor(red: 233/255, green:
                                                237/255, blue: 241/255, alpha: 1)
        
        cyclicview.layer.borderWidth = 1.0
        
        cyclicview.layer.borderColor = UIColor.white.cgColor
        
        cyclicview.layer.cornerRadius = 5.0
        
        cyclicview.clipsToBounds = true
        
        cyclicview.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(cyclicview)
        
        
        
        let cyclicviewtopConstraint = NSLayoutConstraint(item:
                                                            cyclicview, attribute: NSLayoutConstraint.Attribute.top, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: headercycliclbl, attribute:
                                                            NSLayoutConstraint.Attribute.top, multiplier: 1, constant: 40)
        
        
        
        let cyclicviewleadConstraint = NSLayoutConstraint(item:
                                                            cyclicview, attribute: NSLayoutConstraint.Attribute.leading,
                                                          relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                          attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                          constant: 0)
        
        
        
        let cyclicviewtrailConstraint = NSLayoutConstraint(item:
                                                            cyclicview, attribute: NSLayoutConstraint.Attribute.trailing,
                                                           relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                           attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                           constant: 0)
        
        
        
        let cyclicviewheightConstraint = NSLayoutConstraint(item:
                                                                cyclicview, attribute: NSLayoutConstraint.Attribute.height, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 170)
        
        
        
        NSLayoutConstraint.activate([cyclicviewtopConstraint,cyclicviewleadConstraint,
                                     cyclicviewtrailConstraint, cyclicviewheightConstraint])
        
        
        
        cycliclbl.text = "Cyclic Timer"
        
        //    cycliclbl.textAlignment = .center
        
        cycliclbl.numberOfLines = 0
        
        cycliclbl.font =  Font.textfieldFont
        
        cycliclbl.adjustsFontSizeToFitWidth = true
        
        cycliclbl.textColor = .black
        
        cycliclbl.translatesAutoresizingMaskIntoConstraints = false
        
        cyclicview.addSubview(cycliclbl)
        
        
        
        let cyclicviewlbltopConstraint = NSLayoutConstraint(item:
                                                                cycliclbl, attribute: NSLayoutConstraint.Attribute.top, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: cyclicview, attribute:
                                                                NSLayoutConstraint.Attribute.top, multiplier: 1, constant: 20)
        
        
        
        let cyclicviewlblleadConstraint = NSLayoutConstraint(item:
                                                                cycliclbl, attribute: NSLayoutConstraint.Attribute.leading, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: cyclicview, attribute:
                                                                NSLayoutConstraint.Attribute.leading, multiplier: 1, constant: 5)
        
        
        
        let cyclicviewlbltrailConstraint = NSLayoutConstraint(item:
                                                                cycliclbl, attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 44 / 100))
        
        
        
        let cyclicviewlblheightConstraint = NSLayoutConstraint(item:
                                                                cycliclbl, attribute: NSLayoutConstraint.Attribute.height, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 50)
        
        
        
        NSLayoutConstraint.activate([cyclicviewlbltopConstraint,cyclicviewlblleadConstraint,
                                     cyclicviewlbltrailConstraint, cyclicviewlblheightConstraint])
        
        
        
        
        
        if(toggleststr1 == "0")
            
        {
            
            cyclicviewswitch.setImage(UIImage(named:
                                                "settings_toggle_off.png"), for: .normal)
            
        }
        
        else
        
        {
            
            cyclicviewswitch.setImage(UIImage(named:
                                                "settings_toggle_on.png"), for: .normal)
            
        }
        
        cyclicviewswitch.tag =  1
        
        
        
        
        
        cyclicviewswitch.addTarget(self, action:
                                    #selector(startcapacitioronoff(sender:)), for: .touchUpInside)
        
        cyclicviewswitch.isUserInteractionEnabled = true
        
        cyclicviewswitch.translatesAutoresizingMaskIntoConstraints = false
        
        cyclicview.addSubview(cyclicviewswitch)
        
        
        
        let cyclicviewswitchtopConstraint = NSLayoutConstraint(item:
                                                                cyclicviewswitch, attribute: NSLayoutConstraint.Attribute.top,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: cyclicview,
                                                               attribute: NSLayoutConstraint.Attribute.top, multiplier: 1,
                                                               constant: 20)
        
        
        
        let cyclicviewswitchleadConstraint = NSLayoutConstraint(item:
                                                                    cyclicviewswitch, attribute: NSLayoutConstraint.Attribute.leading,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: cyclicview,
                                                                attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                                constant: (view.frame.size.width * 45 / 100))
        
        
        
        let cyclicviewswitchwidthConstraint = NSLayoutConstraint(item:
                                                                    cyclicviewswitch, attribute: NSLayoutConstraint.Attribute.width,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                    (view.frame.size.width * 34 / 100))
        
        
        
        let cyclicviewswitchheightConstraint =
        NSLayoutConstraint(item: cyclicviewswitch, attribute:
                            NSLayoutConstraint.Attribute.height, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([cyclicviewswitchtopConstraint,cyclicviewswitchleadConstraint,cyclicviewswitchwidthConstraint,cyclicviewswitchheightConstraint])
        
        
        
        
        
        
        
        
        
        cyclicviewsentbtn.backgroundColor = .clear
        
        cyclicviewsentbtn.setImage(UIImage(named:
                                            "send_settings.png"), for: .normal)
        
        cyclicviewsentbtn.tag = 1
        
        cyclicviewsentbtn.addTarget(self, action:
                                        #selector(onoffsend(sender:)), for: .touchUpInside)
        
        cyclicviewsentbtn.translatesAutoresizingMaskIntoConstraints = false
        
        cyclicview.addSubview(cyclicviewsentbtn)
        
        
        
        let cyclicviewsentbtntopConstraint = NSLayoutConstraint(item:
                                                                    cyclicviewsentbtn, attribute: NSLayoutConstraint.Attribute.top,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: cyclicview,
                                                                attribute: NSLayoutConstraint.Attribute.top, multiplier: 1,
                                                                constant: 10)
        
        
        
        let cyclicviewsentbtnleadConstraint = NSLayoutConstraint(item:
                                                                    cyclicviewsentbtn, attribute: NSLayoutConstraint.Attribute.leading,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: cyclicview,
                                                                 attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                                 constant: (view.frame.size.width * 83 / 100))
        
        
        
        let cyclicviewsentbtntrailConstraint =
        NSLayoutConstraint(item: cyclicviewsentbtn, attribute:
                            NSLayoutConstraint.Attribute.width, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                            (view.frame.size.width * 15 / 100))
        
        
        
        let cyclicviewsentbtnheightConstraint =
        NSLayoutConstraint(item: cyclicviewsentbtn, attribute:
                            NSLayoutConstraint.Attribute.height, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant:
                            view.frame.size.width * 15 / 100)
        
        
        
        NSLayoutConstraint.activate([cyclicviewsentbtntopConstraint,cyclicviewsentbtnleadConstraint,
                                     cyclicviewsentbtntrailConstraint, cyclicviewsentbtnheightConstraint])
        
        
        
        if(modelid == 27)
            
        {
            
            
            
            changeoverview.backgroundColor = UIColor(red: 233/255,
                                                     green: 237/255, blue: 241/255, alpha: 1)
            
            changeoverview.layer.borderWidth = 1.0
            
            changeoverview.layer.borderColor = UIColor.white.cgColor
            
            changeoverview.layer.cornerRadius = 5.0
            
            changeoverview.clipsToBounds = true
            
            changeoverview.translatesAutoresizingMaskIntoConstraints = false
            
            cyclicview.addSubview(changeoverview)
            
            
            
            let changeoverviewtopConstraint = NSLayoutConstraint(item:
                                                                    changeoverview, attribute: NSLayoutConstraint.Attribute.top,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: cyclicview,
                                                                 attribute: NSLayoutConstraint.Attribute.top, multiplier: 1, constant:
                                                                    100)
            
            
            
            let changeoverviewleadConstraint = NSLayoutConstraint(item:
                                                                    changeoverview, attribute: NSLayoutConstraint.Attribute.leading,
                                                                  relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                                  attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                                  constant: 0)
            
            
            
            let changeoverviewtrailConstraint =
            NSLayoutConstraint(item: changeoverview, attribute:
                                NSLayoutConstraint.Attribute.trailing, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: contentview, attribute:
                                NSLayoutConstraint.Attribute.trailing, multiplier: 1, constant: 0)
            
            
            
            let changeoverviewheightConstraint =
            NSLayoutConstraint(item: changeoverview, attribute:
                                NSLayoutConstraint.Attribute.height, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 70)
            
            
            
            NSLayoutConstraint.activate([changeoverviewtopConstraint,changeoverviewleadConstraint,
                                         changeoverviewtrailConstraint,changeoverviewheightConstraint])
            
            
            
            changeoverlbl.text = "Change Over"
            
            //    cycliclbl.textAlignment = .center
            
            changeoverlbl.numberOfLines = 0
            
            changeoverlbl.font =  Font.textfieldFont
            
            changeoverlbl.adjustsFontSizeToFitWidth = true
            
            changeoverlbl.textColor = .black
            
            changeoverlbl.translatesAutoresizingMaskIntoConstraints = false
            
            changeoverview.addSubview(changeoverlbl)
            
            
            
            let changeoverviewlbltopConstraint =
            NSLayoutConstraint(item: changeoverlbl, attribute:
                                NSLayoutConstraint.Attribute.centerY, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: changeoverview, attribute:
                                NSLayoutConstraint.Attribute.centerY, multiplier: 1, constant: 0)
            
            
            
            let changeoverviewlblleadConstraint =
            NSLayoutConstraint(item: changeoverlbl, attribute:
                                NSLayoutConstraint.Attribute.leading, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: changeoverview, attribute:
                                NSLayoutConstraint.Attribute.leading, multiplier: 1, constant: 5)
            
            
            
            let changeoverviewlbltrailConstraint =
            NSLayoutConstraint(item: changeoverlbl, attribute:
                                NSLayoutConstraint.Attribute.width, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                (view.frame.size.width * 44 / 100))
            
            
            
            let changeoverviewlblheightConstraint =
            NSLayoutConstraint(item: changeoverlbl, attribute:
                                NSLayoutConstraint.Attribute.height, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 50)
            
            
            
            NSLayoutConstraint.activate([changeoverviewlbltopConstraint,changeoverviewlblleadConstraint,
                                         changeoverviewlbltrailConstraint, changeoverviewlblheightConstraint])
            
            
            
            
            
            if(toggleststr1 == "0")
                
            {
                
                changeoverviewswitch.setImage(UIImage(named:
                                                        "settings_toggle_off.png"), for: .normal)
                
            }
            
            else
            
            {
                
                changeoverviewswitch.setImage(UIImage(named:
                                                        "settings_toggle_on.png"), for: .normal)
                
            }
            
            changeoverviewswitch.tag =  1
            
            
            
            
            
            changeoverviewswitch.addTarget(self, action:
                                            #selector(startcapacitioronoff(sender:)), for: .touchUpInside)
            
            changeoverviewswitch.isUserInteractionEnabled = true
            
            changeoverviewswitch.translatesAutoresizingMaskIntoConstraints
            = false
            
            changeoverview.addSubview(changeoverviewswitch)
            
            
            
            let changeoverviewswitchtopConstraint =
            NSLayoutConstraint(item: changeoverviewswitch, attribute:
                                NSLayoutConstraint.Attribute.centerY, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: changeoverview, attribute:
                                NSLayoutConstraint.Attribute.centerY, multiplier: 1, constant: 0)
            
            
            
            let changeoverviewswitchleadConstraint =
            NSLayoutConstraint(item: changeoverviewswitch, attribute:
                                NSLayoutConstraint.Attribute.leading, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: changeoverview, attribute:
                                NSLayoutConstraint.Attribute.leading, multiplier: 1, constant:
                                (view.frame.size.width * 45 / 100))
            
            
            
            let changeoverviewswitchwidthConstraint =
            NSLayoutConstraint(item: changeoverviewswitch, attribute:
                                NSLayoutConstraint.Attribute.width, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                (view.frame.size.width * 34 / 100))
            
            
            
            let changeoverviewswitchheightConstraint =
            NSLayoutConstraint(item: changeoverviewswitch, attribute:
                                NSLayoutConstraint.Attribute.height, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
            
            
            
            NSLayoutConstraint.activate([changeoverviewswitchtopConstraint,changeoverviewswitchleadConstraint,changeoverviewswitchwidthConstraint,changeoverviewswitchheightConstraint])
            
            
            
            changeoverviewsentbtn.backgroundColor = .clear
            
            changeoverviewsentbtn.setImage(UIImage(named:
                                                    "send_settings.png"), for: .normal)
            
            changeoverviewsentbtn.tag = 1
            
            changeoverviewsentbtn.addTarget(self, action:
                                                #selector(onoffsend(sender:)), for: .touchUpInside)
            
            changeoverviewsentbtn.translatesAutoresizingMaskIntoConstraints
            = false
            
            changeoverview.addSubview(changeoverviewsentbtn)
            
            
            
            let changeoverviewsentbtntopConstraint =
            NSLayoutConstraint(item: changeoverviewsentbtn, attribute:
                                NSLayoutConstraint.Attribute.centerY, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: changeoverview, attribute:
                                NSLayoutConstraint.Attribute.centerY, multiplier: 1, constant: 0)
            
            
            
            let changeoverviewsentbtnleadConstraint =
            NSLayoutConstraint(item: changeoverviewsentbtn, attribute:
                                NSLayoutConstraint.Attribute.leading, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: changeoverview, attribute:
                                NSLayoutConstraint.Attribute.leading, multiplier: 1, constant:
                                (view.frame.size.width * 83 / 100))
            
            
            
            let changeoverviewsentbtntrailConstraint =
            NSLayoutConstraint(item: changeoverviewsentbtn, attribute:
                                NSLayoutConstraint.Attribute.width, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                (view.frame.size.width * 15 / 100))
            
            
            
            let changeoverviewsentbtnheightConstraint =
            NSLayoutConstraint(item: changeoverviewsentbtn, attribute:
                                NSLayoutConstraint.Attribute.height, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant:
                                view.frame.size.width * 15 / 100)
            
            
            
            NSLayoutConstraint.activate([changeoverviewsentbtntopConstraint,changeoverviewsentbtnleadConstraint,
                                         changeoverviewsentbtntrailConstraint,
                                         changeoverviewsentbtnheightConstraint])
            
        }
        
        
        
        cycliconoofflblview.backgroundColor = UIColor(red: 233/255,
                                                      green: 237/255, blue: 241/255, alpha: 1)
        
        cycliconoofflblview.clipsToBounds = true
        
        cycliconoofflblview.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(cycliconoofflblview)
        
        
        
        var cycliconoofflblviewtopConstraint:NSLayoutConstraint!
        
        if(modelid == 27)
            
        {
            
            cycliconoofflblviewtopConstraint =
            NSLayoutConstraint(item: cycliconoofflblview, attribute:
                                NSLayoutConstraint.Attribute.top, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: changeoverview, attribute:
                                NSLayoutConstraint.Attribute.top, multiplier: 1, constant: 75)
            
            
        }
        
        else{
            
            cycliconoofflblviewtopConstraint =
            NSLayoutConstraint(item: cycliconoofflblview, attribute:
                                NSLayoutConstraint.Attribute.top, relatedBy:
                                NSLayoutConstraint.Relation.equal, toItem: cyclicview,
                               attribute: NSLayoutConstraint.Attribute.top, multiplier: 1, constant:
                                100)
            
        }
        
        
        
        let cycliconoofflblviewleadConstraint =
        NSLayoutConstraint(item: cycliconoofflblview, attribute:
                            NSLayoutConstraint.Attribute.leading, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: contentview, attribute:
                            NSLayoutConstraint.Attribute.leading, multiplier: 1, constant: 0)
        
        
        
        let cycliconoofflblviewtrailConstraint =
        NSLayoutConstraint(item: cycliconoofflblview, attribute:
                            NSLayoutConstraint.Attribute.trailing, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: contentview, attribute:
                            NSLayoutConstraint.Attribute.trailing, multiplier: 1, constant: 0)
        
        
        
        let cycliconoofflblviewheightConstraint =
        NSLayoutConstraint(item: cycliconoofflblview, attribute:
                            NSLayoutConstraint.Attribute.height, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([cycliconoofflblviewtopConstraint,cycliconoofflblviewleadConstraint,
                                     cycliconoofflblviewtrailConstraint,
                                     cycliconoofflblviewheightConstraint])
        
        
        
        cycliconolbl.text = "ON Time"
        
        cycliconolbl.textAlignment = .center
        
        cycliconolbl.numberOfLines = 0
        
        cycliconolbl.font = Font.textfieldFont
        
        cycliconolbl.adjustsFontSizeToFitWidth = true
        
        cycliconolbl.textColor = .black
        
        cycliconolbl.translatesAutoresizingMaskIntoConstraints = false
        
        cycliconoofflblview.addSubview(cycliconolbl)
        
        
        
        let cycliconolbltopConstraint = NSLayoutConstraint(item:
                                                            cycliconolbl, attribute: NSLayoutConstraint.Attribute.centerY,
                                                           relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                            cycliconoofflblview, attribute: NSLayoutConstraint.Attribute.centerY,
                                                           multiplier: 1, constant: 0)
        
        
        
        let cycliconolblleadConstraint = NSLayoutConstraint(item:
                                                                cycliconolbl, attribute: NSLayoutConstraint.Attribute.leading,
                                                            relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                                cycliconoofflblview, attribute: NSLayoutConstraint.Attribute.leading,
                                                            multiplier: 1, constant: 5)
        
        
        
        let cycliconolbltrailConstraint = NSLayoutConstraint(item:
                                                                cycliconolbl, attribute: NSLayoutConstraint.Attribute.width,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 44 / 100))
        
        
        
        let cycliconolblheightConstraint = NSLayoutConstraint(item:
                                                                cycliconolbl, attribute: NSLayoutConstraint.Attribute.height,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([cycliconolbltopConstraint,cycliconolblleadConstraint,
                                     cycliconolbltrailConstraint, cycliconolblheightConstraint])
        
        
        
        
        
        
        
        
        
        cyclicofflbl.text = "OFF Time"
        
        cyclicofflbl.textAlignment = .center
        
        cyclicofflbl.numberOfLines = 0
        
        cyclicofflbl.font =  Font.textfieldFont
        
        cyclicofflbl.adjustsFontSizeToFitWidth = true
        
        cyclicofflbl.textColor = .black
        
        cyclicofflbl.translatesAutoresizingMaskIntoConstraints = false
        
        cycliconoofflblview.addSubview(cyclicofflbl)
        
        
        
        let cyclicofflbltopConstraint = NSLayoutConstraint(item:
                                                            cyclicofflbl, attribute: NSLayoutConstraint.Attribute.centerY,
                                                           relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                            cycliconoofflblview, attribute: NSLayoutConstraint.Attribute.centerY,
                                                           multiplier: 1, constant: 0)
        
        
        
        let cyclicofflblleadConstraint = NSLayoutConstraint(item:
                                                                cyclicofflbl, attribute: NSLayoutConstraint.Attribute.leading,
                                                            relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                                cycliconoofflblview, attribute: NSLayoutConstraint.Attribute.leading,
                                                            multiplier: 1, constant: (view.frame.size.width * 45 / 100))
        
        
        
        let cyclicofflblwidthConstraint = NSLayoutConstraint(item:
                                                                cyclicofflbl, attribute: NSLayoutConstraint.Attribute.width,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 34 / 100))
        
        
        
        let cyclicofflblheightConstraint = NSLayoutConstraint(item:
                                                                cyclicofflbl, attribute: NSLayoutConstraint.Attribute.height,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([cyclicofflbltopConstraint,cyclicofflblleadConstraint,cyclicofflblwidthConstraint,cyclicofflblheightConstraint])
        
        
        
        cycliconooffview.backgroundColor = UIColor(red: 233/255,
                                                   green: 237/255, blue: 241/255, alpha: 1)
        
        cycliconooffview.layer.borderWidth = 1.0
        
        cycliconooffview.layer.borderColor = UIColor.white.cgColor
        
        cycliconooffview.layer.cornerRadius = 5.0
        
        cycliconooffview.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(cycliconooffview)
        
        
        
        let cycliconooffviewtopConstraint = NSLayoutConstraint(item:
                                                                cycliconooffview, attribute: NSLayoutConstraint.Attribute.top,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                                cycliconoofflblview, attribute: NSLayoutConstraint.Attribute.top,
                                                               multiplier: 1, constant: 40)
        
        
        
        let cycliconooffviewleadConstraint = NSLayoutConstraint(item:
                                                                    cycliconooffview, attribute: NSLayoutConstraint.Attribute.leading,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                                attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                                constant: 0)
        
        
        
        let cycliconooffviewtrailConstraint = NSLayoutConstraint(item:
                                                                    cycliconooffview, attribute: NSLayoutConstraint.Attribute.trailing,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                                 attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                                 constant: 0)
        
        
        
        let cycliconooffviewheightConstraint =
        NSLayoutConstraint(item: cycliconooffview, attribute:
                            NSLayoutConstraint.Attribute.height, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 130)
        
        
        
        NSLayoutConstraint.activate([cycliconooffviewtopConstraint,cycliconooffviewleadConstraint,
                                     cycliconooffviewtrailConstraint, cycliconooffviewheightConstraint])
        
        
        
        txtcyclicon.backgroundColor = .white
        
        txtcyclicon.delegate = self
        
        txtcyclicon.layer.borderColor = UIColor.red.cgColor
        
        txtcyclicon.font = UIFont(name: "Roboto-Bold", size: 20)
        
        txtcyclicon.textAlignment = .center
        
        txtcyclicon.textColor = .black
        
        txtcyclicon.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtcyclicon.translatesAutoresizingMaskIntoConstraints = false
        
        cycliconooffview.addSubview(txtcyclicon)
        
        
        
        let txtcyclicontopConstraint = NSLayoutConstraint(item:
                                                            txtcyclicon, attribute: NSLayoutConstraint.Attribute.top,
                                                          relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                            cycliconooffview, attribute: NSLayoutConstraint.Attribute.top,
                                                          multiplier: 1, constant: 10)
        
        
        
        let txtcycliconleadConstraint = NSLayoutConstraint(item:
                                                            txtcyclicon, attribute: NSLayoutConstraint.Attribute.leading,
                                                           relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                            cycliconooffview, attribute: NSLayoutConstraint.Attribute.leading,
                                                           multiplier: 1, constant: 5)
        
        
        
        let txtcyclicontrailConstraint = NSLayoutConstraint(item:
                                                                txtcyclicon, attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 35 / 100))
        
        
        
        let txtcycliconheightConstraint = NSLayoutConstraint(item:
                                                                txtcyclicon, attribute: NSLayoutConstraint.Attribute.height,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtcyclicontopConstraint,txtcycliconleadConstraint,
                                     txtcyclicontrailConstraint,txtcycliconheightConstraint])
        
        
        
        txtcyclicoff.backgroundColor = .white
        
        txtcyclicoff.delegate = self
        
        txtcyclicoff.layer.borderColor = UIColor.red.cgColor
        
        txtcyclicoff.font = UIFont(name: "Roboto-Bold", size: 20)
        
        txtcyclicoff.textAlignment = .center
        
        txtcyclicoff.textColor = .black
        
        txtcyclicoff.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtcyclicoff.translatesAutoresizingMaskIntoConstraints = false
        
        cycliconooffview.addSubview(txtcyclicoff)
        
        
        
        let txtcyclicofftopConstraint = NSLayoutConstraint(item:
                                                            txtcyclicoff, attribute: NSLayoutConstraint.Attribute.top,
                                                           relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                            cycliconooffview, attribute: NSLayoutConstraint.Attribute.top,
                                                           multiplier: 1, constant: 10)
        
        
        
        let txtcyclicoffleadConstraint = NSLayoutConstraint(item:
                                                                txtcyclicoff, attribute: NSLayoutConstraint.Attribute.leading,
                                                            relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                                cycliconooffview, attribute: NSLayoutConstraint.Attribute.leading,
                                                            multiplier: 1, constant: (view.frame.size.width * 45 / 100))
        
        
        
        let txtcyclicofftrailConstraint = NSLayoutConstraint(item:
                                                                txtcyclicoff, attribute: NSLayoutConstraint.Attribute.width,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 35 / 100))
        
        
        
        let txtcyclicoffheightConstraint = NSLayoutConstraint(item:
                                                                txtcyclicoff, attribute: NSLayoutConstraint.Attribute.height,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtcyclicofftopConstraint,txtcyclicoffleadConstraint,
                                     txtcyclicofftrailConstraint,txtcyclicoffheightConstraint])
        
        
        
        cyclicoooffsend.backgroundColor = .clear
        
        cyclicoooffsend.setImage(UIImage(named: "send_settings.png"),
                                 for: .normal)
        
        cyclicoooffsend.addTarget(self, action:
                                    #selector(cycliconoffsend(sender:)), for: .touchUpInside)
        
        cyclicoooffsend.translatesAutoresizingMaskIntoConstraints = false
        
        cycliconooffview.addSubview(cyclicoooffsend)
        
        
        
        let cyclicoooffsendtopConstraint = NSLayoutConstraint(item:
                                                                cyclicoooffsend, attribute: NSLayoutConstraint.Attribute.top,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                               cycliconooffview, attribute: NSLayoutConstraint.Attribute.top,
                                                              multiplier: 1, constant: 0)
        
        
        
        let cyclicoooffsendleadConstraint = NSLayoutConstraint(item:
                                                                cyclicoooffsend, attribute: NSLayoutConstraint.Attribute.leading,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                                cycliconooffview, attribute: NSLayoutConstraint.Attribute.leading,
                                                               multiplier: 1, constant: (view.frame.size.width * 83 / 100))
        
        
        
        let cyclicoooffsendtrailConstraint = NSLayoutConstraint(item:
                                                                    cyclicoooffsend, attribute: NSLayoutConstraint.Attribute.width,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                    (view.frame.size.width * 15 / 100))
        
        
        
        let cyclicoooffsendheightConstraint = NSLayoutConstraint(item:
                                                                    cyclicoooffsend, attribute: NSLayoutConstraint.Attribute.height,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant:
                                                                    60)
        
        
        
        NSLayoutConstraint.activate([cyclicoooffsendtopConstraint,cyclicoooffsendleadConstraint,
                                     cyclicoooffsendtrailConstraint, cyclicoooffsendheightConstraint])
     
     
     dryoffTimerlbl.text = "Off Time"
     
     dryoffTimerlbl.textAlignment = .center
     
     dryoffTimerlbl.numberOfLines = 0
     
     dryoffTimerlbl.font =  Font.textfieldFont
     
     dryoffTimerlbl.adjustsFontSizeToFitWidth = true
     
     dryoffTimerlbl.textColor = .black
     
     dryoffTimerlbl.translatesAutoresizingMaskIntoConstraints = false
     
     cycliconooffview.addSubview(dryoffTimerlbl)
     
     
     
     let dryoffTimerlbltopConstraint = NSLayoutConstraint(item:
                                                             dryoffTimerlbl, attribute: NSLayoutConstraint.Attribute.top,
                                                         relatedBy: NSLayoutConstraint.Relation.equal, toItem: cycliconooffview,
                                                         attribute: NSLayoutConstraint.Attribute.top, multiplier: 1,
                                                         constant: 70)
     
     
     
     let dryoffTimerlblleadConstraint = NSLayoutConstraint(item:
                                                             dryoffTimerlbl, attribute: NSLayoutConstraint.Attribute.leading,
                                                          relatedBy: NSLayoutConstraint.Relation.equal, toItem: cycliconooffview,
                                                          attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                          constant: 5)
     
     
     
     let dryoffTimerlbltrailConstraint = NSLayoutConstraint(item:
                                                             dryoffTimerlbl, attribute: NSLayoutConstraint.Attribute.width,
                                                           relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                             NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                             (view.frame.size.width * 44 / 100))
     
     
     
     let dryoffTimerlblheightConstraint = NSLayoutConstraint(item:
                                                             dryoffTimerlbl, attribute: NSLayoutConstraint.Attribute.height,
                                                            relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                             NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 50)
     
     
     
     NSLayoutConstraint.activate([dryoffTimerlbltopConstraint,dryoffTimerlblleadConstraint,
                                  dryoffTimerlbltrailConstraint,dryoffTimerlblheightConstraint])
     
     
     
     
     
     txtdryoffTimer.backgroundColor = .white
     
     txtdryoffTimer.delegate = self
     
     txtdryoffTimer.layer.borderColor = UIColor.red.cgColor
     
     txtdryoffTimer.font = UIFont(name: "Roboto-Bold", size: 22)
     
     txtdryoffTimer.textAlignment = .center
     
     txtdryoffTimer.textColor = .black
     
     txtdryoffTimer.attributedPlaceholder =
     NSAttributedString(string:"HH:MM:SS",
                        attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
     
     txtdryoffTimer.translatesAutoresizingMaskIntoConstraints = false
     
     cycliconooffview.addSubview(txtdryoffTimer)
     
     
     
     let txtdryoffTimertopConstraint = NSLayoutConstraint(item:
                                                             txtdryoffTimer, attribute: NSLayoutConstraint.Attribute.top,
                                                         relatedBy: NSLayoutConstraint.Relation.equal, toItem: cycliconooffview,
                                                         attribute: NSLayoutConstraint.Attribute.top, multiplier: 1,
                                                         constant: 70)
     
     
     
     let txtdryoffTimerleadConstraint = NSLayoutConstraint(item:
                                                             txtdryoffTimer, attribute: NSLayoutConstraint.Attribute.leading,
                                                          relatedBy: NSLayoutConstraint.Relation.equal, toItem: cycliconooffview,
                                                          attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                          constant: (view.frame.size.width * 45 / 100))
     
     
     
     let txtdryoffTimertrailConstraint = NSLayoutConstraint(item:
                                                             txtdryoffTimer, attribute: NSLayoutConstraint.Attribute.width,
                                                           relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                             NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                             (view.frame.size.width * 34 / 100))
     
     
     
     let txtdryoffTimerheightConstraint = NSLayoutConstraint(item:
                                                             txtdryoffTimer, attribute: NSLayoutConstraint.Attribute.height,
                                                            relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                             NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
     
     
     
     NSLayoutConstraint.activate([txtdryoffTimertopConstraint,txtdryoffTimerleadConstraint,
                                  txtdryoffTimertrailConstraint,txtdryoffTimerheightConstraint])
     
     
        
        
        
        dryrunrstview.backgroundColor = UIColor(red: 233/255, green:
                                                    237/255, blue: 241/255, alpha: 1)
        
        dryrunrstview.clipsToBounds = true
        
        dryrunrstview.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(dryrunrstview)
        
        
        
        let dryrunrstviewtopConstraint = NSLayoutConstraint(item:
                                                                dryrunrstview, attribute: NSLayoutConstraint.Attribute.top, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: cycliconooffview,
                                                            attribute: NSLayoutConstraint.Attribute.top, multiplier: 1, constant:
                                                                140)
        
        
        
        let dryrunrstviewleadConstraint = NSLayoutConstraint(item:
                                                                dryrunrstview, attribute: NSLayoutConstraint.Attribute.leading,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                             attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                             constant: 0)
        
        
        
        let dryrunrstviewtrailConstraint = NSLayoutConstraint(item:
                                                                dryrunrstview, attribute: NSLayoutConstraint.Attribute.trailing,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                              attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                              constant: 0)
        
        
        
        let dryrunrstviewheightConstraint = NSLayoutConstraint(item:
                                                                dryrunrstview, attribute: NSLayoutConstraint.Attribute.height,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([dryrunrstviewtopConstraint,dryrunrstviewleadConstraint,
                                     dryrunrstviewtrailConstraint, dryrunrstviewheightConstraint])
        
        
        
        dryrstm1lbl.text = "DRY RUN RESTART TIMER"
        
        dryrstm1lbl.textAlignment = .center
        
        dryrstm1lbl.numberOfLines = 0
        
        dryrstm1lbl.font =  Font.textfieldFont
        
        dryrstm1lbl.adjustsFontSizeToFitWidth = true
        
        dryrstm1lbl.textColor = .black
        
        dryrstm1lbl.translatesAutoresizingMaskIntoConstraints = false
        
        dryrunrstview.addSubview(dryrstm1lbl)
        
        
        
        let dryrstm1lbltopConstraint = NSLayoutConstraint(item:
                                                            dryrstm1lbl, attribute: NSLayoutConstraint.Attribute.centerY,
                                                          relatedBy: NSLayoutConstraint.Relation.equal, toItem: dryrunrstview,
                                                          attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                          constant: 0)
        
        
        
        let dryrstm1lblleadConstraint = NSLayoutConstraint(item:
                                                            dryrstm1lbl, attribute: NSLayoutConstraint.Attribute.leading,
                                                           relatedBy: NSLayoutConstraint.Relation.equal, toItem: dryrunrstview,
                                                           attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                           constant: 5)
        
        
        
        let dryrstm1lbltrailConstraint = NSLayoutConstraint(item:
                                                                dryrstm1lbl, attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 99 / 100))
        
        
        
        let dryrstm1lblheightConstraint = NSLayoutConstraint(item:
                                                                dryrstm1lbl, attribute: NSLayoutConstraint.Attribute.height,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([dryrstm1lbltopConstraint,dryrstm1lblleadConstraint,
                                     dryrstm1lbltrailConstraint, dryrstm1lblheightConstraint])
        
        
        
        dryrsttxtview.backgroundColor = UIColor(red: 233/255, green:
                                                    237/255, blue: 241/255, alpha: 1)
        
        dryrsttxtview.layer.borderWidth = 1.0
        
        dryrsttxtview.layer.borderColor = UIColor.white.cgColor
        
        dryrsttxtview.layer.cornerRadius = 5.0
        
        dryrsttxtview.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(dryrsttxtview)
        
        
        
        let dryrsttxtviewtopConstraint = NSLayoutConstraint(item:
                                                                dryrsttxtview, attribute: NSLayoutConstraint.Attribute.top, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: dryrunrstview, attribute:
                                                                NSLayoutConstraint.Attribute.top, multiplier: 1, constant: 40)
        
        
        
        let dryrsttxtviewleadConstraint = NSLayoutConstraint(item:
                                                                dryrsttxtview, attribute: NSLayoutConstraint.Attribute.leading,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                             attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                             constant: 0)
        
        
        
        let dryrsttxtviewtrailConstraint = NSLayoutConstraint(item:
                                                                dryrsttxtview, attribute: NSLayoutConstraint.Attribute.trailing,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                              attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                              constant: 0)
        
        
        
        let dryrsttxtviewheightConstraint = NSLayoutConstraint(item:
                                                                dryrsttxtview, attribute: NSLayoutConstraint.Attribute.height,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 70)
        
        
        
        NSLayoutConstraint.activate([dryrsttxtviewtopConstraint,dryrsttxtviewleadConstraint,
                                     dryrsttxtviewtrailConstraint, dryrsttxtviewheightConstraint])
        
        
        
        
        
        txtdryrsttxtm1.backgroundColor = .white
        
        txtdryrsttxtm1.delegate = self
        
        txtdryrsttxtm1.layer.borderColor = UIColor.red.cgColor
        
        txtdryrsttxtm1.font = UIFont(name: "Roboto-Bold", size: 20)
        
        txtdryrsttxtm1.textAlignment = .center
        
        txtdryrsttxtm1.textColor = .black
        
        txtdryrsttxtm1.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtdryrsttxtm1.translatesAutoresizingMaskIntoConstraints = false
        
        dryrsttxtview.addSubview(txtdryrsttxtm1)
        
        
        
        let txtdryrsttxtm1topConstraint = NSLayoutConstraint(item:
                                                                txtdryrsttxtm1, attribute: NSLayoutConstraint.Attribute.centerY,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: dryrsttxtview,
                                                             attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                             constant: 0)
        
        
        
        let txtdryrsttxtm1leadConstraint = NSLayoutConstraint(item:
                                                                txtdryrsttxtm1, attribute: NSLayoutConstraint.Attribute.leading,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: dryrsttxtview,
                                                              attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                              constant: 5)
        
        
        
        let txtdryrsttxtm1trailConstraint = NSLayoutConstraint(item:
                                                                txtdryrsttxtm1, attribute: NSLayoutConstraint.Attribute.width,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 35 / 100))
        
        
        
        let txtdryrsttxtm1heightConstraint = NSLayoutConstraint(item:
                                                                    txtdryrsttxtm1, attribute: NSLayoutConstraint.Attribute.height,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtdryrsttxtm1topConstraint,txtdryrsttxtm1leadConstraint,
                                     txtdryrsttxtm1trailConstraint,txtdryrsttxtm1heightConstraint])
        
        
        
        txtdryrsttxtm2.backgroundColor = .white
        
        txtdryrsttxtm2.delegate = self
        
        txtdryrsttxtm2.layer.borderColor = UIColor.red.cgColor
        
        txtdryrsttxtm2.font = UIFont(name: "Roboto-Bold", size: 20)
        
        txtdryrsttxtm2.textAlignment = .center
        
        txtdryrsttxtm2.textColor = .black
        
        txtdryrsttxtm2.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtdryrsttxtm2.translatesAutoresizingMaskIntoConstraints = false
        
        dryrsttxtview.addSubview(txtdryrsttxtm2)
        
        
        
        let txtdryrsttxtm2topConstraint = NSLayoutConstraint(item:
                                                                txtdryrsttxtm2, attribute: NSLayoutConstraint.Attribute.centerY,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: dryrsttxtview,
                                                             attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                             constant: 0)
        
        
        
        let txtdryrsttxtm2leadConstraint = NSLayoutConstraint(item:
                                                                txtdryrsttxtm2, attribute: NSLayoutConstraint.Attribute.leading,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: dryrsttxtview,
                                                              attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                              constant: (view.frame.size.width * 45 / 100))
        
        
        
        let txtdryrsttxtm2trailConstraint = NSLayoutConstraint(item:
                                                                txtdryrsttxtm2, attribute: NSLayoutConstraint.Attribute.width,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 35 / 100))
        
        
        
        let txtdryrsttxtm2heightConstraint = NSLayoutConstraint(item:
                                                                    txtdryrsttxtm2, attribute: NSLayoutConstraint.Attribute.height,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtdryrsttxtm2topConstraint,txtdryrsttxtm2leadConstraint,
                                     txtdryrsttxtm2trailConstraint,txtdryrsttxtm2heightConstraint])
        
        
        
        dryrstsend.backgroundColor = .clear
        
        dryrstsend.setImage(UIImage(named: "send_settings.png"), for: .normal)
        
        dryrstsend.addTarget(self, action:
                                #selector(dryrunrstsend(sender:)), for: .touchUpInside)
        
        dryrstsend.translatesAutoresizingMaskIntoConstraints = false
        
        dryrsttxtview.addSubview(dryrstsend)
        
        
        
        let dryrstsendtopConstraint = NSLayoutConstraint(item:
                                                            dryrstsend, attribute: NSLayoutConstraint.Attribute.centerY,
                                                         relatedBy: NSLayoutConstraint.Relation.equal, toItem: dryrsttxtview,
                                                         attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                         constant: 0)
        
        
        
        let dryrstsendleadConstraint = NSLayoutConstraint(item:
                                                            dryrstsend, attribute: NSLayoutConstraint.Attribute.leading,
                                                          relatedBy: NSLayoutConstraint.Relation.equal, toItem: dryrsttxtview,
                                                          attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                          constant: (view.frame.size.width * 83 / 100))
        
        
        
        let dryrstsendtrailConstraint = NSLayoutConstraint(item:
                                                            dryrstsend, attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                            NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                            (view.frame.size.width * 15 / 100))
        
        
        
        let dryrstsendheightConstraint = NSLayoutConstraint(item:
                                                                dryrstsend, attribute: NSLayoutConstraint.Attribute.height, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant:
                                                                view.frame.size.width * 15 / 100)
        
        
        
        NSLayoutConstraint.activate([dryrstsendtopConstraint,dryrstsendleadConstraint,
                                     dryrstsendtrailConstraint, dryrstsendheightConstraint])
        
        
        
        headermaximumlbl.backgroundColor = colorcode.bgcolor
        
        headermaximumlbl.text = "Maximum Runtime"
        
        headermaximumlbl.textAlignment = .center
        
        headermaximumlbl.font = Font.headerFont
        
        headermaximumlbl.textColor = UIColor.white
        
        headermaximumlbl.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(headermaximumlbl)
        
        var headermaximumlbltopConstraint:NSLayoutConstraint!
        
        if(modelid == 27)
            
        {
            
            headermaximumlbltopConstraint = NSLayoutConstraint(item:
                                                                headermaximumlbl, attribute: NSLayoutConstraint.Attribute.top,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: dryrsttxtview,
                                                               attribute: NSLayoutConstraint.Attribute.top, multiplier: 1, constant:
                                                                80)
            
        }
        
        else{
            
            headermaximumlbltopConstraint = NSLayoutConstraint(item:
                                                                headermaximumlbl, attribute: NSLayoutConstraint.Attribute.top,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                                cycliconooffview, attribute: NSLayoutConstraint.Attribute.top,
                                                               multiplier: 1, constant: 70)
            
        }
        
        
        
        let headermaximumlblleadConstraint = NSLayoutConstraint(item:
                                                                    headermaximumlbl, attribute: NSLayoutConstraint.Attribute.leading,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                                attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                                constant: 0)
        
        
        
        let headermaximumlbltrailConstraint = NSLayoutConstraint(item:
                                                                    headermaximumlbl, attribute: NSLayoutConstraint.Attribute.trailing,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                                 attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                                 constant: 0)
        
        
        
        let headermaximumlblheightConstraint =
        NSLayoutConstraint(item: headermaximumlbl, attribute:
                            NSLayoutConstraint.Attribute.height, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([headermaximumlbltopConstraint,headermaximumlblleadConstraint,
                                     headermaximumlbltrailConstraint,headermaximumlblheightConstraint])
        
        
        
        maximunrunview.backgroundColor = UIColor(red: 233/255, green:
                                                    237/255, blue: 241/255, alpha: 1)
        
        maximunrunview.layer.borderWidth = 1.0
        
        maximunrunview.layer.borderColor = UIColor.white.cgColor
        
        maximunrunview.layer.cornerRadius = 5.0
        
        maximunrunview.clipsToBounds = true
        
        maximunrunview.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(maximunrunview)
        
        
        
        let maximunrunviewtopConstraint = NSLayoutConstraint(item:
                                                                maximunrunview, attribute: NSLayoutConstraint.Attribute.top,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                                headermaximumlbl, attribute: NSLayoutConstraint.Attribute.top,
                                                             multiplier: 1, constant: 40)
        
        
        
        let maximunrunviewleadConstraint = NSLayoutConstraint(item:
                                                                maximunrunview, attribute: NSLayoutConstraint.Attribute.leading,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                              attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                              constant: 0)
        
        
        
        let maximunrunviewtrailConstraint = NSLayoutConstraint(item:
                                                                maximunrunview, attribute: NSLayoutConstraint.Attribute.trailing,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                               attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                               constant: 0)
        
        
        
        let maximunrunviewheightConstraint = NSLayoutConstraint(item:
                                                                    maximunrunview, attribute: NSLayoutConstraint.Attribute.height,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 70)
        
        
        
        NSLayoutConstraint.activate([maximunrunviewtopConstraint,maximunrunviewleadConstraint,
                                     maximunrunviewtrailConstraint, maximunrunviewheightConstraint])
        
        
        
        maximunrunlbl.text = "Maximum Run Time"
        
        maximunrunlbl.numberOfLines = 0
        
        maximunrunlbl.font =  Font.textfieldFont
        
        maximunrunlbl.adjustsFontSizeToFitWidth = true
        
        maximunrunlbl.textColor = .black
        
        maximunrunlbl.translatesAutoresizingMaskIntoConstraints = false
        
        maximunrunview.addSubview(maximunrunlbl)
        
        
        
        let maximunrunlbltopConstraint = NSLayoutConstraint(item:
                                                                maximunrunlbl, attribute: NSLayoutConstraint.Attribute.centerY,
                                                            relatedBy: NSLayoutConstraint.Relation.equal, toItem: maximunrunview,
                                                            attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                            constant: 0)
        
        
        
        let maximunrunlblleadConstraint = NSLayoutConstraint(item:
                                                                maximunrunlbl, attribute: NSLayoutConstraint.Attribute.leading,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: maximunrunview,
                                                             attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                             constant: 5)
        
        
        
        let maximunrunlbltrailConstraint = NSLayoutConstraint(item:
                                                                maximunrunlbl, attribute: NSLayoutConstraint.Attribute.width,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 44 / 100))
        
        
        
        let maximunrunlblheightConstraint = NSLayoutConstraint(item:
                                                                maximunrunlbl, attribute: NSLayoutConstraint.Attribute.height,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 50)
        
        
        
        NSLayoutConstraint.activate([maximunrunlbltopConstraint,maximunrunlblleadConstraint,
                                     maximunrunlbltrailConstraint, maximunrunlblheightConstraint])
        
        
        
        
        
        if(toggleststr2 == "0")
            
        {
            
            maximunrunswitch.setImage(UIImage(named:
                                                "settings_toggle_off.png"), for: .normal)
            
        }
        
        else
        
        {
            
            maximunrunswitch.setImage(UIImage(named:
                                                "settings_toggle_on.png"), for: .normal)
            
        }
        
        maximunrunswitch.tag =  2
        
        maximunrunswitch.addTarget(self, action:
                                    #selector(startcapacitioronoff(sender:)), for: .touchUpInside)
        
        maximunrunswitch.isUserInteractionEnabled = true
        
        maximunrunswitch.translatesAutoresizingMaskIntoConstraints = false
        
        maximunrunview.addSubview(maximunrunswitch)
        
        
        
        let maximunrunswitchtopConstraint = NSLayoutConstraint(item:
                                                                maximunrunswitch, attribute: NSLayoutConstraint.Attribute.centerY,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: maximunrunview,
                                                               attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                               constant: 0)
        
        
        
        let maximunrunswitchleadConstraint = NSLayoutConstraint(item:
                                                                    maximunrunswitch, attribute: NSLayoutConstraint.Attribute.leading,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: maximunrunview,
                                                                attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                                constant: (view.frame.size.width * 45 / 100))
        
        
        
        let maximunrunswitchwidthConstraint = NSLayoutConstraint(item:
                                                                    maximunrunswitch, attribute: NSLayoutConstraint.Attribute.width,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                    (view.frame.size.width * 34 / 100))
        
        
        
        let maximunrunswitchheightConstraint =
        NSLayoutConstraint(item: maximunrunswitch, attribute:
                            NSLayoutConstraint.Attribute.height, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([maximunrunswitchtopConstraint,maximunrunswitchleadConstraint,maximunrunswitchwidthConstraint,maximunrunswitchheightConstraint])
        
        
        
        maximunrunsentbtn.backgroundColor = .clear
        
        maximunrunsentbtn.setImage(UIImage(named:
                                            "send_settings.png"), for: .normal)
        
        maximunrunsentbtn.tag = 2
        
        maximunrunsentbtn.addTarget(self, action:
                                        #selector(onoffsend(sender:)), for: .touchUpInside)
        
        maximunrunsentbtn.translatesAutoresizingMaskIntoConstraints = false
        
        maximunrunview.addSubview(maximunrunsentbtn)
        
        
        
        let maximunrunsentbtntopConstraint = NSLayoutConstraint(item:
                                                                    maximunrunsentbtn, attribute: NSLayoutConstraint.Attribute.centerY,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: maximunrunview,
                                                                attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                                constant: 0)
        
        
        
        let maximunrunsentbtnleadConstraint = NSLayoutConstraint(item:
                                                                    maximunrunsentbtn, attribute: NSLayoutConstraint.Attribute.leading,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: maximunrunview,
                                                                 attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                                 constant: (view.frame.size.width * 83 / 100))
        
        
        
        let maximunrunsentbtntrailConstraint =
        NSLayoutConstraint(item: maximunrunsentbtn, attribute:
                            NSLayoutConstraint.Attribute.width, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                            (view.frame.size.width * 15 / 100))
        
        
        
        let maximunrunsentbtnheightConstraint =
        NSLayoutConstraint(item: maximunrunsentbtn, attribute:
                            NSLayoutConstraint.Attribute.height, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant:
                            view.frame.size.width * 15 / 100)
        
        
        
        NSLayoutConstraint.activate([maximunrunsentbtntopConstraint,maximunrunsentbtnleadConstraint,
                                     maximunrunsentbtntrailConstraint, maximunrunsentbtnheightConstraint])
        
        
        
        
        
        delayTimerview.backgroundColor = UIColor(red: 233/255, green:
                                                    237/255, blue: 241/255, alpha: 1)
        
        delayTimerview.layer.borderWidth = 1.0
        
        delayTimerview.layer.borderColor = UIColor.white.cgColor
        
        delayTimerview.layer.cornerRadius = 5.0
        
        delayTimerview.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(delayTimerview)
        
        
        
        let delayTimerviewtopConstraint = NSLayoutConstraint(item:
                                                                delayTimerview, attribute: NSLayoutConstraint.Attribute.top,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: maximunrunview,
                                                             attribute: NSLayoutConstraint.Attribute.top, multiplier: 1, constant:
                                                                75)
        
        
        
        let delayTimerviewleadConstraint = NSLayoutConstraint(item:
                                                                delayTimerview, attribute: NSLayoutConstraint.Attribute.leading,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                              attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                              constant: 0)
        
        
        
        let delayTimerviewtrailConstraint = NSLayoutConstraint(item:
                                                                delayTimerview, attribute: NSLayoutConstraint.Attribute.trailing,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                               attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                               constant: 0)
        
        
        
        let delayTimerviewheightConstraint = NSLayoutConstraint(item:
                                                                    delayTimerview, attribute: NSLayoutConstraint.Attribute.height,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 70)
        
        
        
        NSLayoutConstraint.activate([delayTimerviewtopConstraint,delayTimerviewleadConstraint,
                                     delayTimerviewtrailConstraint, delayTimerviewheightConstraint])
        
        
        
         
        
        delayTimerlbl.text = "Delay Timer"
        
        delayTimerlbl.textAlignment = .center
        
        delayTimerlbl.numberOfLines = 0
        
        delayTimerlbl.font =  Font.textfieldFont
        
        delayTimerlbl.adjustsFontSizeToFitWidth = true
        
        delayTimerlbl.textColor = .black
        
        delayTimerlbl.translatesAutoresizingMaskIntoConstraints = false
        
        delayTimerview.addSubview(delayTimerlbl)
        
        
        
        let delayTimerlbltopConstraint = NSLayoutConstraint(item:
                                                                delayTimerlbl, attribute: NSLayoutConstraint.Attribute.centerY,
                                                            relatedBy: NSLayoutConstraint.Relation.equal, toItem: delayTimerview,
                                                            attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                            constant: 0)
        
        
        
        let delayTimerlblleadConstraint = NSLayoutConstraint(item:
                                                                delayTimerlbl, attribute: NSLayoutConstraint.Attribute.leading,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: delayTimerview,
                                                             attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                             constant: 5)
        
        
        
        let delayTimerlbltrailConstraint = NSLayoutConstraint(item:
                                                                delayTimerlbl, attribute: NSLayoutConstraint.Attribute.width,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 44 / 100))
        
        
        
        let delayTimerlblheightConstraint = NSLayoutConstraint(item:
                                                                delayTimerlbl, attribute: NSLayoutConstraint.Attribute.height,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 50)
        
        
        
        NSLayoutConstraint.activate([delayTimerlbltopConstraint,delayTimerlblleadConstraint,
                                     delayTimerlbltrailConstraint,delayTimerlblheightConstraint])
        
        
        
        
        
        txtdelayTimer.backgroundColor = .white
        
        txtdelayTimer.delegate = self
        
        txtdelayTimer.layer.borderColor = UIColor.red.cgColor
        
        txtdelayTimer.font = UIFont(name: "Roboto-Bold", size: 22)
        
        txtdelayTimer.textAlignment = .center
        
        txtdelayTimer.textColor = .black
        
        txtdelayTimer.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtdelayTimer.translatesAutoresizingMaskIntoConstraints = false
        
        delayTimerview.addSubview(txtdelayTimer)
        
        
        
        let txtdelayTimertopConstraint = NSLayoutConstraint(item:
                                                                txtdelayTimer, attribute: NSLayoutConstraint.Attribute.centerY,
                                                            relatedBy: NSLayoutConstraint.Relation.equal, toItem: delayTimerview,
                                                            attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                            constant: 0)
        
        
        
        let txtdelayTimerleadConstraint = NSLayoutConstraint(item:
                                                                txtdelayTimer, attribute: NSLayoutConstraint.Attribute.leading,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: delayTimerview,
                                                             attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                             constant: (view.frame.size.width * 45 / 100))
        
        
        
        let txtdelayTimertrailConstraint = NSLayoutConstraint(item:
                                                                txtdelayTimer, attribute: NSLayoutConstraint.Attribute.width,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 34 / 100))
        
        
        
        let txtdelayTimerheightConstraint = NSLayoutConstraint(item:
                                                                txtdelayTimer, attribute: NSLayoutConstraint.Attribute.height,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtdelayTimertopConstraint,txtdelayTimerleadConstraint,
                                     txtdelayTimertrailConstraint,txtdelayTimerheightConstraint])
        
        
        
        
        
        delayTimersentbtn.backgroundColor = .clear
        
        delayTimersentbtn.setImage(UIImage(named:
                                            "send_settings.png"), for: .normal)
        
        delayTimersentbtn.addTarget(self, action:
                                        #selector(ondelaysend(sender:)), for: .touchUpInside)
        
        delayTimersentbtn.translatesAutoresizingMaskIntoConstraints = false
        
        delayTimerview.addSubview(delayTimersentbtn)
        
        
        
        let delayTimersentbtntopConstraint = NSLayoutConstraint(item:
                                                                    delayTimersentbtn, attribute: NSLayoutConstraint.Attribute.centerY,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: delayTimerview,
                                                                attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                                constant: 0)
        
        
        
        let delayTimersentbtnleadConstraint = NSLayoutConstraint(item:
                                                                    delayTimersentbtn, attribute: NSLayoutConstraint.Attribute.leading,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: delayTimerview,
                                                                 attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                                 constant: (view.frame.size.width * 83 / 100))
        
        
        
        let delayTimersentbtntrailConstraint =
        NSLayoutConstraint(item: delayTimersentbtn, attribute:
                            NSLayoutConstraint.Attribute.width, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                            (view.frame.size.width * 15 / 100))
        
        
        
        let delayTimersentbtnheightConstraint =
        NSLayoutConstraint(item: delayTimersentbtn, attribute:
                            NSLayoutConstraint.Attribute.height, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant:
                            view.frame.size.width * 15 / 100)
        
        
        
        NSLayoutConstraint.activate([delayTimersentbtntopConstraint,delayTimersentbtnleadConstraint,
                                     delayTimersentbtntrailConstraint, delayTimersentbtnheightConstraint])
        
        
        
        headernightRtclbl.backgroundColor = colorcode.bgcolor
        
        headernightRtclbl.text = "NIGHT LIGHT RTC"
        
        headernightRtclbl.textAlignment = .center
        
        headernightRtclbl.font = Font.headerFont
        
        headernightRtclbl.textColor = UIColor.white
        
        headernightRtclbl.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(headernightRtclbl)
        
        
        
        let headernightRtclbltopConstraint = NSLayoutConstraint(item:
                                                                    headernightRtclbl, attribute: NSLayoutConstraint.Attribute.top,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: delayTimerview,
                                                                attribute: NSLayoutConstraint.Attribute.top, multiplier: 1, constant:
                                                                    70)
        
        
        
        let headernightRtclblleadConstraint = NSLayoutConstraint(item:
                                                                    headernightRtclbl, attribute: NSLayoutConstraint.Attribute.leading,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                                 attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                                 constant: 0)
        
        
        
        let headernightRtclbltrailConstraint =
        NSLayoutConstraint(item: headernightRtclbl, attribute:
                            NSLayoutConstraint.Attribute.trailing, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: contentview, attribute:
                            NSLayoutConstraint.Attribute.trailing, multiplier: 1, constant: 0)
        
        
        
        let headernightRtclblheightConstraint =
        NSLayoutConstraint(item: headernightRtclbl, attribute:
                            NSLayoutConstraint.Attribute.height, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 30)
        
        
        
        NSLayoutConstraint.activate([headernightRtclbltopConstraint,headernightRtclblleadConstraint,
                                     headernightRtclbltrailConstraint,headernightRtclblheightConstraint])
        
        
        
        nightlightview.backgroundColor = UIColor(red: 233/255, green:
                                                    237/255, blue: 241/255, alpha: 1)
        
        nightlightview.layer.borderWidth = 1.0
        
        nightlightview.layer.borderColor = UIColor.white.cgColor
        
        nightlightview.layer.cornerRadius = 5.0
        
        nightlightview.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(nightlightview)
        
        
        
        let nightlightviewtopConstraint = NSLayoutConstraint(item:
                                                                nightlightview, attribute: NSLayoutConstraint.Attribute.top,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                                headernightRtclbl, attribute: NSLayoutConstraint.Attribute.top,
                                                             multiplier: 1, constant: 35)
        
        
        
        let nightlightviewleadConstraint = NSLayoutConstraint(item:
                                                                nightlightview, attribute: NSLayoutConstraint.Attribute.leading,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                              attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                              constant: 0)
        
        
        
        let nightlightviewtrailConstraint = NSLayoutConstraint(item:
                                                                nightlightview, attribute: NSLayoutConstraint.Attribute.trailing,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                               attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                               constant: 0)
        
        
        
        let nightlightviewheightConstraint = NSLayoutConstraint(item:
                                                                    nightlightview, attribute: NSLayoutConstraint.Attribute.height,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 70)
        
        
        
        NSLayoutConstraint.activate([nightlightviewtopConstraint,nightlightviewleadConstraint,
                                     nightlightviewtrailConstraint,nightlightviewheightConstraint])
        
        
        
        
        
        nightlightlbl.text = "Night Light RTC"
        
        //     nightlightlbl.textAlignment = .center
        
        nightlightlbl.numberOfLines = 0
        
        nightlightlbl.font =  Font.textfieldFont
        
        nightlightlbl.adjustsFontSizeToFitWidth = true
        
        nightlightlbl.textColor = .black
        
        nightlightlbl.translatesAutoresizingMaskIntoConstraints = false
        
        nightlightview.addSubview(nightlightlbl)
        
        
        
        let nightlightlbltopConstraint = NSLayoutConstraint(item:
                                                                nightlightlbl, attribute: NSLayoutConstraint.Attribute.centerY,
                                                            relatedBy: NSLayoutConstraint.Relation.equal, toItem: nightlightview,
                                                            attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                            constant: 0)
        
        
        
        let nightlightlblleadConstraint = NSLayoutConstraint(item:
                                                                nightlightlbl, attribute: NSLayoutConstraint.Attribute.leading,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: nightlightview,
                                                             attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                             constant: 5)
        
        
        
        let nightlightlbltrailConstraint = NSLayoutConstraint(item:
                                                                nightlightlbl, attribute: NSLayoutConstraint.Attribute.width,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 44 / 100))
        
        
        
        let nightlightlblheightConstraint = NSLayoutConstraint(item:
                                                                nightlightlbl, attribute: NSLayoutConstraint.Attribute.height,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 50)
        
        
        
        NSLayoutConstraint.activate([nightlightlbltopConstraint,nightlightlblleadConstraint,
                                     nightlightlbltrailConstraint,nightlightlblheightConstraint])
        
        
        
        
        
        if(toggleststr3 == "0")
            
        {
            
            nightlightswitch.setImage(UIImage(named:
                                                "settings_toggle_off.png"), for: .normal)
            
        }
        
        else
        
        {
            
            nightlightswitch.setImage(UIImage(named:
                                                "settings_toggle_on.png"), for: .normal)
            
        }
        
        nightlightswitch.tag =  3
        
        nightlightswitch.addTarget(self, action:
                                    #selector(startcapacitioronoff(sender:)), for: .touchUpInside)
        
        nightlightswitch.isUserInteractionEnabled = true
        
        nightlightswitch.translatesAutoresizingMaskIntoConstraints = false
        
        nightlightview.addSubview(nightlightswitch)
        
        
        
        let nightlightswitchtopConstraint = NSLayoutConstraint(item:
                                                                nightlightswitch, attribute: NSLayoutConstraint.Attribute.centerY,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nightlightview,
                                                               attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                               constant: 0)
        
        
        
        let nightlightswitchleadConstraint = NSLayoutConstraint(item:
                                                                    nightlightswitch, attribute: NSLayoutConstraint.Attribute.leading,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: maximunrunview,
                                                                attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                                constant: (view.frame.size.width * 45 / 100))
        
        
        
        let nightlightswitchwidthConstraint = NSLayoutConstraint(item:
                                                                    nightlightswitch, attribute: NSLayoutConstraint.Attribute.width,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                    (view.frame.size.width * 34 / 100))
        
        
        
        let nightlightswitchheightConstraint =
        NSLayoutConstraint(item: nightlightswitch, attribute:
                            NSLayoutConstraint.Attribute.height, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([nightlightswitchtopConstraint,nightlightswitchleadConstraint,nightlightswitchwidthConstraint,nightlightswitchheightConstraint])
        
        
        
        
        
        nightlightsentbtn.backgroundColor = .clear
        
        nightlightsentbtn.setImage(UIImage(named:
                                            "send_settings.png"), for: .normal)
        
        nightlightsentbtn.tag = 3
        
        nightlightsentbtn.addTarget(self, action:
                                        #selector(onoffsend(sender:)), for: .touchUpInside)
        
        nightlightsentbtn.translatesAutoresizingMaskIntoConstraints = false
        
        nightlightview.addSubview(nightlightsentbtn)
        
        
        
        let nightlightsentbtntopConstraint = NSLayoutConstraint(item:
                                                                    nightlightsentbtn, attribute: NSLayoutConstraint.Attribute.centerY,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nightlightview,
                                                                attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                                constant: 0)
        
        
        
        let nightlightsentbtnleadConstraint = NSLayoutConstraint(item:
                                                                    nightlightsentbtn, attribute: NSLayoutConstraint.Attribute.leading,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: nightlightview,
                                                                 attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                                 constant: (view.frame.size.width * 83 / 100))
        
        
        
        let nightlightsentbtntrailConstraint =
        NSLayoutConstraint(item: nightlightsentbtn, attribute:
                            NSLayoutConstraint.Attribute.width, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                            (view.frame.size.width * 15 / 100))
        
        
        
        let nightlightsentbtnheightConstraint =
        NSLayoutConstraint(item: nightlightsentbtn, attribute:
                            NSLayoutConstraint.Attribute.height, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant:
                            view.frame.size.width * 15 / 100)
        
        
        
        NSLayoutConstraint.activate([nightlightsentbtntopConstraint,nightlightsentbtnleadConstraint,
                                     nightlightsentbtntrailConstraint, nightlightsentbtnheightConstraint])
        
        
        
        
        
        nightonoofflblview.backgroundColor = UIColor(red: 233/255,
                                                     green: 237/255, blue: 241/255, alpha: 1)
        
        nightonoofflblview.clipsToBounds = true
        
        nightonoofflblview.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(nightonoofflblview)
        
        
        
        let nightonoofflblviewtopConstraint = NSLayoutConstraint(item:
                                                                    nightonoofflblview, attribute: NSLayoutConstraint.Attribute.top,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: nightlightview,
                                                                 attribute: NSLayoutConstraint.Attribute.top, multiplier: 1, constant:
                                                                    70)
        
        
        
        let nightonoofflblviewleadConstraint =
        NSLayoutConstraint(item: nightonoofflblview, attribute:
                            NSLayoutConstraint.Attribute.leading, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: contentview, attribute:
                            NSLayoutConstraint.Attribute.leading, multiplier: 1, constant: 0)
        
        
        
        let nightonoofflblviewtrailConstraint =
        NSLayoutConstraint(item: nightonoofflblview, attribute:
                            NSLayoutConstraint.Attribute.trailing, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: contentview, attribute:
                            NSLayoutConstraint.Attribute.trailing, multiplier: 1, constant: 0)
        
        
        
        let nightonoofflblviewheightConstraint =
        NSLayoutConstraint(item: nightonoofflblview, attribute:
                            NSLayoutConstraint.Attribute.height, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([nightonoofflblviewtopConstraint,nightonoofflblviewleadConstraint,
                                     nightonoofflblviewtrailConstraint,
                                     nightonoofflblviewheightConstraint])
        
        
        
        nightonolbl.text = "FROM"
        
        nightonolbl.textAlignment = .center
        
        nightonolbl.numberOfLines = 0
        
        nightonolbl.font =  Font.textfieldFont
        
        nightonolbl.adjustsFontSizeToFitWidth = true
        
        nightonolbl.textColor = .black
        
        nightonolbl.translatesAutoresizingMaskIntoConstraints = false
        
        nightonoofflblview.addSubview(nightonolbl)
        
        
        
        let nightonolbltopConstraint = NSLayoutConstraint(item:
                                                            nightonolbl, attribute: NSLayoutConstraint.Attribute.centerY,
                                                          relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                            nightonoofflblview, attribute: NSLayoutConstraint.Attribute.centerY,
                                                          multiplier: 1, constant: 0)
        
        
        
        let nightonolblleadConstraint = NSLayoutConstraint(item:
                                                            nightonolbl, attribute: NSLayoutConstraint.Attribute.leading,
                                                           relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                            nightonoofflblview, attribute: NSLayoutConstraint.Attribute.leading,
                                                           multiplier: 1, constant: 0)
        
        
        
        let nightonolbltrailConstraint = NSLayoutConstraint(item:
                                                                nightonolbl, attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 40 / 100))
        
        
        
        let nightonolblheightConstraint = NSLayoutConstraint(item:
                                                                nightonolbl, attribute: NSLayoutConstraint.Attribute.height,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([nightonolbltopConstraint,nightonolblleadConstraint,
                                     nightonolbltrailConstraint, nightonolblheightConstraint])
        
        
        
        
        
        nightofflbl.text = "TO"
        
        nightofflbl.textAlignment = .center
        
        nightofflbl.numberOfLines = 0
        
        nightofflbl.font =  Font.textfieldFont
        
        nightofflbl.adjustsFontSizeToFitWidth = true
        
        nightofflbl.textColor = .black
        
        nightofflbl.translatesAutoresizingMaskIntoConstraints = false
        
        nightonoofflblview.addSubview(nightofflbl)
        
        
        
        let nightofflbltopConstraint = NSLayoutConstraint(item:
                                                            nightofflbl, attribute: NSLayoutConstraint.Attribute.centerY,
                                                          relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                            nightonoofflblview, attribute: NSLayoutConstraint.Attribute.centerY,
                                                          multiplier: 1, constant: 0)
        
        
        
        let nightofflblleadConstraint = NSLayoutConstraint(item:
                                                            nightofflbl, attribute: NSLayoutConstraint.Attribute.leading,
                                                           relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                            nightonoofflblview, attribute: NSLayoutConstraint.Attribute.leading,
                                                           multiplier: 1, constant: (view.frame.size.width * 45 / 100))
        
        
        
        let nightofflblwidthConstraint = NSLayoutConstraint(item:
                                                                nightofflbl, attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 35 / 100))
        
        
        
        let nightofflblheightConstraint = NSLayoutConstraint(item:
                                                                nightofflbl, attribute: NSLayoutConstraint.Attribute.height,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([nightofflbltopConstraint,nightofflblleadConstraint,nightofflblwidthConstraint,nightofflblheightConstraint])
        
        
        
        
        
        
        
        nightonooffview.backgroundColor = UIColor(red: 233/255, green:
                                                    237/255, blue: 241/255, alpha: 1)
        
        nightonooffview.layer.borderWidth = 1.0
        
        nightonooffview.layer.borderColor = UIColor.white.cgColor
        
        nightonooffview.layer.cornerRadius = 5.0
        
        nightonooffview.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(nightonooffview)
        
        
        
        let nightonooffviewtopConstraint = NSLayoutConstraint(item:
                                                                nightonooffview, attribute: NSLayoutConstraint.Attribute.top,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem:
                                                                nightonoofflblview, attribute: NSLayoutConstraint.Attribute.top,
                                                              multiplier: 1, constant: 40)
        
        
        
        let nightonooffviewleadConstraint = NSLayoutConstraint(item:
                                                                nightonooffview, attribute: NSLayoutConstraint.Attribute.leading,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                               attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                               constant: 0)
        
        
        
        
        
        let nightonooffviewtrailConstraint = NSLayoutConstraint(item:
                                                                    nightonooffview, attribute: NSLayoutConstraint.Attribute.trailing,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                                attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                                constant: 0)
        
        
        
        let nightonooffviewheightConstraint = NSLayoutConstraint(item:
                                                                    nightonooffview, attribute: NSLayoutConstraint.Attribute.height,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 70)
        
        
        
        NSLayoutConstraint.activate([nightonooffviewtopConstraint,nightonooffviewleadConstraint,
                                     nightonooffviewtrailConstraint, nightonooffviewheightConstraint])
        
        
        
        txtnighton.backgroundColor = .white
        
        txtnighton.delegate = self
        
        txtnighton.layer.borderColor = UIColor.red.cgColor
        
        txtnighton.font = UIFont(name: "Roboto-Bold", size: 20)
        
        txtnighton.textAlignment = .center
        
        txtnighton.textColor = .black
        
        txtnighton.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtnighton.translatesAutoresizingMaskIntoConstraints = false
        
        nightonooffview.addSubview(txtnighton)
        
        
        
        let txtnightontopConstraint = NSLayoutConstraint(item:
                                                            txtnighton, attribute: NSLayoutConstraint.Attribute.centerY,
                                                         relatedBy: NSLayoutConstraint.Relation.equal, toItem: nightonooffview,
                                                         attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                         constant: 0)
        
        
        
        let txtnightonleadConstraint = NSLayoutConstraint(item:
                                                            txtnighton, attribute: NSLayoutConstraint.Attribute.leading,
                                                          relatedBy: NSLayoutConstraint.Relation.equal, toItem: nightonooffview,
                                                          attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                          constant: 5)
        
        
        
        let txtnightontrailConstraint = NSLayoutConstraint(item:
                                                            txtnighton, attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                            NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                            (view.frame.size.width * 35 / 100))
        
        
        
        let txtnightonheightConstraint = NSLayoutConstraint(item:
                                                                txtnighton, attribute: NSLayoutConstraint.Attribute.height, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtnightontopConstraint,txtnightonleadConstraint,
                                     txtnightontrailConstraint,txtnightonheightConstraint])
        
        
        
        
        
        
        
        txtnightoff.backgroundColor = .white
        
        txtnightoff.delegate = self
        
        txtnightoff.layer.borderColor = UIColor.red.cgColor
        
        txtnightoff.font = UIFont(name: "Roboto-Bold", size: 20)
        
        txtnightoff.textAlignment = .center
        
        txtnightoff.textColor = .black
        
        txtnightoff.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtnightoff.translatesAutoresizingMaskIntoConstraints = false
        
        nightonooffview.addSubview(txtnightoff)
        
        
        
        let txtnightofftopConstraint = NSLayoutConstraint(item:
                                                            txtnightoff, attribute: NSLayoutConstraint.Attribute.centerY,
                                                          relatedBy: NSLayoutConstraint.Relation.equal, toItem: nightonooffview,
                                                          attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                          constant: 0)
        
        
        
        let txtnightoffleadConstraint = NSLayoutConstraint(item:
                                                            txtnightoff, attribute: NSLayoutConstraint.Attribute.leading,
                                                           relatedBy: NSLayoutConstraint.Relation.equal, toItem: nightonooffview,
                                                           attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                           constant: (view.frame.size.width * 45 / 100))
        
        
        
        let txtnightofftrailConstraint = NSLayoutConstraint(item:
                                                                txtnightoff, attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 35 / 100))
        
        
        
        let txtnightoffheightConstraint = NSLayoutConstraint(item:
                                                                txtnightoff, attribute: NSLayoutConstraint.Attribute.height,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtnightofftopConstraint,txtnightoffleadConstraint,
                                     txtnightofftrailConstraint,txtnightoffheightConstraint])
        
        
        
        
        
        
        
        nightoooffsend.backgroundColor = .clear
        
        nightoooffsend.setImage(UIImage(named: "send_settings.png"),
                                for: .normal)
        
        nightoooffsend.addTarget(self, action:
                                    #selector(nightlightonoffsend(sender:)), for: .touchUpInside)
        
        nightoooffsend.translatesAutoresizingMaskIntoConstraints = false
        
        nightonooffview.addSubview(nightoooffsend)
        
        
        
        let nightoooffsendtopConstraint = NSLayoutConstraint(item:
                                                                nightoooffsend, attribute: NSLayoutConstraint.Attribute.centerY,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: nightonooffview,
                                                             attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                             constant: 0)
        
        
        
        let nightoooffsendleadConstraint = NSLayoutConstraint(item:
                                                                nightoooffsend, attribute: NSLayoutConstraint.Attribute.leading,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: nightonooffview,
                                                              attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                              constant: (view.frame.size.width * 83 / 100))
        
        
        
        let nightoooffsendtrailConstraint = NSLayoutConstraint(item:
                                                                nightoooffsend, attribute: NSLayoutConstraint.Attribute.width,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 15 / 100))
        
        
        
        let nightoooffsendheightConstraint = NSLayoutConstraint(item:
                                                                    nightoooffsend, attribute: NSLayoutConstraint.Attribute.height,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant:
                                                                    view.frame.size.width * 15 / 100)
        
        
        
        NSLayoutConstraint.activate([nightoooffsendtopConstraint,nightoooffsendleadConstraint,
                                     nightoooffsendtrailConstraint, nightoooffsendheightConstraint])
        
        
        
        headerRTClbl.backgroundColor = colorcode.bgcolor
        
        headerRTClbl.text = " RTC "
        
        headerRTClbl.textAlignment = .center
        
        headerRTClbl.font = Font.headerFont
        
        headerRTClbl.textColor = UIColor.white
        
        headerRTClbl.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(headerRTClbl)
        
        
        
        let headerRTClbltopConstraint = NSLayoutConstraint(item:
                                                            headerRTClbl, attribute: NSLayoutConstraint.Attribute.top, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: nightonooffview, attribute:
                                                            NSLayoutConstraint.Attribute.top, multiplier: 1, constant: 70)
        
        
        
        let headerRTClblleadConstraint = NSLayoutConstraint(item:
                                                                headerRTClbl, attribute: NSLayoutConstraint.Attribute.leading,
                                                            relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                            attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                            constant: 0)
        
        
        
        let headerRTClbltrailConstraint = NSLayoutConstraint(item:
                                                                headerRTClbl, attribute: NSLayoutConstraint.Attribute.trailing,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                             attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                             constant: 0)
        
        
        
        let headerRTClblheightConstraint = NSLayoutConstraint(item:
                                                                headerRTClbl, attribute: NSLayoutConstraint.Attribute.height,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 30)
        
        
        
        NSLayoutConstraint.activate([headerRTClbltopConstraint,headerRTClblleadConstraint,
                                     headerRTClbltrailConstraint,headerRTClblheightConstraint])
        
        
        
        RTCview.backgroundColor = UIColor(red: 233/255, green:
                                            237/255, blue: 241/255, alpha: 1)
        
        RTCview.layer.borderWidth = 1.0
        
        RTCview.layer.borderColor = UIColor.white.cgColor
        
        RTCview.layer.cornerRadius = 5.0
        
        RTCview.clipsToBounds = true
        
        RTCview.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(RTCview)
        
        
        
        let RTCviewtopConstraint = NSLayoutConstraint(item: RTCview,
                                                      attribute: NSLayoutConstraint.Attribute.top, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: headerRTClbl, attribute:
                                                        NSLayoutConstraint.Attribute.top, multiplier: 1, constant: 35)
        
        
        
        let RTCviewleadConstraint = NSLayoutConstraint(item: RTCview,
                                                       attribute: NSLayoutConstraint.Attribute.leading, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: contentview, attribute:
                                                        NSLayoutConstraint.Attribute.leading, multiplier: 1, constant: 0)
        
        
        
        let RTCviewtrailConstraint = NSLayoutConstraint(item: RTCview,
                                                        attribute: NSLayoutConstraint.Attribute.trailing, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: contentview, attribute:
                                                            NSLayoutConstraint.Attribute.trailing, multiplier: 1, constant: 0)
        
        
        
        let RTCviewheightConstraint = NSLayoutConstraint(item:
                                                            RTCview, attribute: NSLayoutConstraint.Attribute.height, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 70)
        
        
        
        NSLayoutConstraint.activate([RTCviewtopConstraint,RTCviewleadConstraint,
                                     RTCviewtrailConstraint, RTCviewheightConstraint])
        
        
        
        RTClbl.text = "RTC Timer"
        
        //  RTClbl.textAlignment = .center
        
        RTClbl.numberOfLines = 0
        
        RTClbl.font =  Font.textfieldFont
        
        RTClbl.adjustsFontSizeToFitWidth = true
        
        RTClbl.textColor = .black
        
        RTClbl.translatesAutoresizingMaskIntoConstraints = false
        
        RTCview.addSubview(RTClbl)
        
        
        
        let RTClbltopConstraint = NSLayoutConstraint(item: RTClbl,
                                                     attribute: NSLayoutConstraint.Attribute.centerY, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: RTCview, attribute:
                                                        NSLayoutConstraint.Attribute.centerY, multiplier: 1, constant: 0)
        
        
        
        let RTClblleadConstraint = NSLayoutConstraint(item: RTClbl,
                                                      attribute: NSLayoutConstraint.Attribute.leading, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: RTCview, attribute:
                                                        NSLayoutConstraint.Attribute.leading, multiplier: 1, constant: 5)
        
        
        
        let RTClbltrailConstraint = NSLayoutConstraint(item: RTClbl,
                                                       attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                        NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                        NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                        (view.frame.size.width * 44 / 100))
        
        
        
        let RTClblheightConstraint = NSLayoutConstraint(item: RTClbl,
                                                        attribute: NSLayoutConstraint.Attribute.height, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 50)
        
        
        
        NSLayoutConstraint.activate([RTClbltopConstraint,RTClblleadConstraint,
                                     RTClbltrailConstraint, RTClblheightConstraint])
        
        
        
        
        
        if(toggleststr4 == "0")
            
        {
            
            RTCswitch.setImage(UIImage(named:
                                        "settings_toggle_off.png"), for: .normal)
            
        }
        
        else
        
        {
            
            RTCswitch.setImage(UIImage(named:
                                        "settings_toggle_on.png"), for: .normal)
            
        }
        
        
        
        RTCswitch.addTarget(self, action:
                                #selector(startcapacitioronoff(sender:)), for: .touchUpInside)
        
        RTCswitch.tag = 4
        
        RTCswitch.isUserInteractionEnabled = true
        
        RTCswitch.translatesAutoresizingMaskIntoConstraints = false
        
        RTCview.addSubview(RTCswitch)
        
        
        
        let RTCswitchtopConstraint = NSLayoutConstraint(item:
                                                            RTCswitch, attribute: NSLayoutConstraint.Attribute.centerY, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: RTCview, attribute:
                                                            NSLayoutConstraint.Attribute.centerY, multiplier: 1, constant: 0)
        
        
        
        let RTCswitchleadConstraint = NSLayoutConstraint(item:
                                                            RTCswitch, attribute: NSLayoutConstraint.Attribute.leading, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: RTCview, attribute:
                                                            NSLayoutConstraint.Attribute.leading, multiplier: 1, constant:
                                                            (view.frame.size.width * 45 / 100))
        
        
        
        let RTCswitchwidthConstraint = NSLayoutConstraint(item:
                                                            RTCswitch, attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                            NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                            (view.frame.size.width * 34 / 100))
        
        
        
        let RTCswitchheightConstraint = NSLayoutConstraint(item:
                                                            RTCswitch, attribute: NSLayoutConstraint.Attribute.height, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([RTCswitchtopConstraint,RTCswitchleadConstraint,RTCswitchwidthConstraint,RTCswitchheightConstraint])
        
        
        
        RTCsentbtn.backgroundColor = .clear
        
        RTCsentbtn.setImage(UIImage(named: "send_settings.png"), for: .normal)
        
        RTCsentbtn.tag = 4
        
        RTCsentbtn.addTarget(self, action:
                                #selector(onoffsend(sender:)), for: .touchUpInside)
        
        RTCsentbtn.translatesAutoresizingMaskIntoConstraints = false
        
        RTCview.addSubview(RTCsentbtn)
        
        
        
        let RTCsentbtntopConstraint = NSLayoutConstraint(item:
                                                            RTCsentbtn, attribute: NSLayoutConstraint.Attribute.centerY,
                                                         relatedBy: NSLayoutConstraint.Relation.equal, toItem: RTCview,
                                                         attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                         constant: 0)
        
        
        
        let RTCsentbtnleadConstraint = NSLayoutConstraint(item:
                                                            RTCsentbtn, attribute: NSLayoutConstraint.Attribute.leading,
                                                          relatedBy: NSLayoutConstraint.Relation.equal, toItem: RTCview,
                                                          attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                          constant: (view.frame.size.width * 83 / 100))
        
        
        
        let RTCsentbtntrailConstraint = NSLayoutConstraint(item:
                                                            RTCsentbtn, attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                            NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                            (view.frame.size.width * 15 / 100))
        
        
        
        let RTCsentbtnheightConstraint = NSLayoutConstraint(item:
                                                                RTCsentbtn, attribute: NSLayoutConstraint.Attribute.height, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant:
                                                                view.frame.size.width * 15 / 100)
        
        
        
        NSLayoutConstraint.activate([RTCsentbtntopConstraint,RTCsentbtnleadConstraint,
                                     RTCsentbtntrailConstraint, RTCsentbtnheightConstraint])
        
        
        
        rtconoofflblview.backgroundColor = UIColor(red: 233/255,
                                                   green: 237/255, blue: 241/255, alpha: 1)
        
        rtconoofflblview.clipsToBounds = true
        
        rtconoofflblview.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(rtconoofflblview)
        
        
        
        let rtconoofflblviewtopConstraint = NSLayoutConstraint(item:
                                                                rtconoofflblview, attribute: NSLayoutConstraint.Attribute.top,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: RTCview,
                                                               attribute: NSLayoutConstraint.Attribute.top, multiplier: 1, constant:
                                                                70)
        
        
        
        let rtconoofflblviewleadConstraint = NSLayoutConstraint(item:
                                                                    rtconoofflblview, attribute: NSLayoutConstraint.Attribute.leading,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                                attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                                constant: 0)
        
        
        
        let rtconoofflblviewtrailConstraint = NSLayoutConstraint(item:
                                                                    rtconoofflblview, attribute: NSLayoutConstraint.Attribute.trailing,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                                 attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                                 constant: 0)
        
        
        
        let rtconoofflblviewheightConstraint =
        NSLayoutConstraint(item: rtconoofflblview, attribute:
                            NSLayoutConstraint.Attribute.height, relatedBy:
                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([rtconoofflblviewtopConstraint,rtconoofflblviewleadConstraint,
                                     rtconoofflblviewtrailConstraint, rtconoofflblviewheightConstraint])
        
        
        
        rtconolbl.text = "FROM"
        
        rtconolbl.textAlignment = .center
        
        rtconolbl.numberOfLines = 0
        
        rtconolbl.font =  Font.textfieldFont
        
        rtconolbl.adjustsFontSizeToFitWidth = true
        
        rtconolbl.textColor = .black
        
        rtconolbl.translatesAutoresizingMaskIntoConstraints = false
        
        rtconoofflblview.addSubview(rtconolbl)
        
        
        
        let rtconolbltopConstraint = NSLayoutConstraint(item:
                                                            rtconolbl, attribute: NSLayoutConstraint.Attribute.centerY, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: rtconoofflblview,
                                                        attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                        constant: 0)
        
        
        
        let rtconolblleadConstraint = NSLayoutConstraint(item:
                                                            rtconolbl, attribute: NSLayoutConstraint.Attribute.leading, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: rtconoofflblview,
                                                         attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                         constant: 0)
        
        
        
        let rtconolbltrailConstraint = NSLayoutConstraint(item:
                                                            rtconolbl, attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                            NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                            (view.frame.size.width * 40 / 100))
        
        
        
        let rtconolblheightConstraint = NSLayoutConstraint(item:
                                                            rtconolbl, attribute: NSLayoutConstraint.Attribute.height, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([rtconolbltopConstraint,rtconolblleadConstraint,
                                     rtconolbltrailConstraint, rtconolblheightConstraint])
        
        
        
        rtcofflbl.text = "TO"
        
        rtcofflbl.textAlignment = .center
        
        rtcofflbl.numberOfLines = 0
        
        rtcofflbl.font =  Font.textfieldFont
        
        rtcofflbl.adjustsFontSizeToFitWidth = true
        
        rtcofflbl.textColor = .black
        
        rtcofflbl.translatesAutoresizingMaskIntoConstraints = false
        
        rtconoofflblview.addSubview(rtcofflbl)
        
        
        
        let rtcofflbltopConstraint = NSLayoutConstraint(item:
                                                            rtcofflbl, attribute: NSLayoutConstraint.Attribute.centerY, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: rtconoofflblview,
                                                        attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                        constant: 0)
        
        
        
        let rtcofflblleadConstraint = NSLayoutConstraint(item:
                                                            rtcofflbl, attribute: NSLayoutConstraint.Attribute.leading, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: rtconoofflblview,
                                                         attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                         constant: (view.frame.size.width * 45 / 100))
        
        
        
        let rtcofflblwidthConstraint = NSLayoutConstraint(item:
                                                            rtcofflbl, attribute: NSLayoutConstraint.Attribute.width, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                            NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                            (view.frame.size.width * 35 / 100))
        
        
        
        let rtcofflblheightConstraint = NSLayoutConstraint(item:
                                                            rtcofflbl, attribute: NSLayoutConstraint.Attribute.height, relatedBy:
                                                            NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                            NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([rtcofflbltopConstraint,rtcofflblleadConstraint,rtcofflblwidthConstraint,rtcofflblheightConstraint])
        
        
        
        rtctimer1view.backgroundColor = UIColor(red: 233/255, green:
                                                    237/255, blue: 241/255, alpha: 1)
        
        rtctimer1view.layer.borderWidth = 1.0
        
        rtctimer1view.layer.borderColor = UIColor.white.cgColor
        
        rtctimer1view.layer.cornerRadius = 5.0
        
        rtctimer1view.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(rtctimer1view)
        
        
        
        let rtctimer1viewtopConstraint = NSLayoutConstraint(item:
                                                                rtctimer1view, attribute: NSLayoutConstraint.Attribute.top, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: rtconoofflblview,
                                                            attribute: NSLayoutConstraint.Attribute.top, multiplier: 1, constant:
                                                                40)
        
        
        
        let rtctimer1viewleadConstraint = NSLayoutConstraint(item:
                                                                rtctimer1view, attribute: NSLayoutConstraint.Attribute.leading,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                             attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                             constant: 0)
        
        
        
        let rtctimer1viewtrailConstraint = NSLayoutConstraint(item:
                                                                rtctimer1view, attribute: NSLayoutConstraint.Attribute.trailing,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                              attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                              constant: 0)
        
        
        
        let rtctimer1viewheightConstraint = NSLayoutConstraint(item:
                                                                rtctimer1view, attribute: NSLayoutConstraint.Attribute.height,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 70)
        
        
        
        NSLayoutConstraint.activate([rtctimer1viewtopConstraint,rtctimer1viewleadConstraint,
                                     rtctimer1viewtrailConstraint, rtctimer1viewheightConstraint])
        
        
        
        txtrtctimer1on.backgroundColor = .white
        
        txtrtctimer1on.delegate = self
        
        txtrtctimer1on.layer.borderColor = UIColor.red.cgColor
        
        txtrtctimer1on.font = UIFont(name: "Roboto-Bold", size: 20)
        
        txtrtctimer1on.textAlignment = .center
        
        txtrtctimer1on.textColor = .black
        
        txtrtctimer1on.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtrtctimer1on.translatesAutoresizingMaskIntoConstraints = false
        
        rtctimer1view.addSubview(txtrtctimer1on)
        
        
        
        let txtrtctimer1ontopConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer1on, attribute: NSLayoutConstraint.Attribute.centerY,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer1view,
                                                             attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                             constant: 0)
        
        
        
        let txtrtctimer1onleadConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer1on, attribute: NSLayoutConstraint.Attribute.leading,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer1view,
                                                              attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                              constant: 5)
        
        
        
        let txtrtctimer1ontrailConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer1on, attribute: NSLayoutConstraint.Attribute.width,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 35 / 100))
        
        
        
        let txtrtctimer1onheightConstraint = NSLayoutConstraint(item:
                                                                    txtrtctimer1on, attribute: NSLayoutConstraint.Attribute.height,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtrtctimer1ontopConstraint,txtrtctimer1onleadConstraint,
                                     txtrtctimer1ontrailConstraint,txtrtctimer1onheightConstraint])
        
        
        
        txtrtctimer1off.backgroundColor = .white
        
        txtrtctimer1off.delegate = self
        
        txtrtctimer1off.layer.borderColor = UIColor.red.cgColor
        
        txtrtctimer1off.font = UIFont(name: "Roboto-Bold", size: 20)
        
        txtrtctimer1off.textAlignment = .center
        
        txtrtctimer1off.textColor = .black
        
        txtrtctimer1off.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtrtctimer1off.translatesAutoresizingMaskIntoConstraints = false
        
        rtctimer1view.addSubview(txtrtctimer1off)
        
        
        
        let txtrtctimer1offtopConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer1off, attribute: NSLayoutConstraint.Attribute.centerY,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer1view,
                                                              attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                              constant: 0)
        
        
        
        let txtrtctimer1offleadConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer1off, attribute: NSLayoutConstraint.Attribute.leading,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer1view,
                                                               attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                               constant: (view.frame.size.width * 45 / 100))
        
        
        
        let txtrtctimer1offtrailConstraint = NSLayoutConstraint(item:
                                                                    txtrtctimer1off, attribute: NSLayoutConstraint.Attribute.width,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                    (view.frame.size.width * 35 / 100))
        
        
        
        let txtrtctimer1offheightConstraint = NSLayoutConstraint(item:
                                                                    txtrtctimer1off, attribute: NSLayoutConstraint.Attribute.height,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtrtctimer1offtopConstraint,txtrtctimer1offleadConstraint,
                                     txtrtctimer1offtrailConstraint,txtrtctimer1offheightConstraint])
        
        
        
        
        
        
        
        rtctimer1send.backgroundColor = .clear
        
        rtctimer1send.setImage(UIImage(named: "send_settings.png"),
                               for: .normal)
        
        rtctimer1send.addTarget(self, action:
                                    #selector(P1onoffsend(sender:)), for: .touchUpInside)
        
        rtctimer1send.translatesAutoresizingMaskIntoConstraints = false
        
        rtctimer1view.addSubview(rtctimer1send)
        
        
        
        let rtctimer1sendtopConstraint = NSLayoutConstraint(item:
                                                                rtctimer1send, attribute: NSLayoutConstraint.Attribute.centerY,
                                                            relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer1view,
                                                            attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                            constant: 0)
        
        
        
        let rtctimer1sendleadConstraint = NSLayoutConstraint(item:
                                                                rtctimer1send, attribute: NSLayoutConstraint.Attribute.leading,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer1view,
                                                             attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                             constant: (view.frame.size.width * 83 / 100))
        
        
        
        let rtctimer1sendtrailConstraint = NSLayoutConstraint(item:
                                                                rtctimer1send, attribute: NSLayoutConstraint.Attribute.width,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 15 / 100))
        
        
        
        let rtctimer1sendheightConstraint = NSLayoutConstraint(item:
                                                                rtctimer1send, attribute: NSLayoutConstraint.Attribute.height,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant:
                                                                view.frame.size.width * 15 / 100)
        
        
        
        NSLayoutConstraint.activate([rtctimer1sendtopConstraint,rtctimer1sendleadConstraint,
                                     rtctimer1sendtrailConstraint, rtctimer1sendheightConstraint])
        
        
        
        rtctimer2view.backgroundColor = UIColor(red: 233/255, green:
                                                    237/255, blue: 241/255, alpha: 1)
        
        rtctimer2view.layer.borderWidth = 1.0
        
        rtctimer2view.layer.borderColor = UIColor.white.cgColor
        
        rtctimer2view.layer.cornerRadius = 5.0
        
        rtctimer2view.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(rtctimer2view)
        
        
        
        let rtctimer2viewtopConstraint = NSLayoutConstraint(item:
                                                                rtctimer2view, attribute: NSLayoutConstraint.Attribute.top, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: rtctimer1view, attribute:
                                                                NSLayoutConstraint.Attribute.top, multiplier: 1, constant: 70)
        
        
        
        let rtctimer2viewleadConstraint = NSLayoutConstraint(item:
                                                                rtctimer2view, attribute: NSLayoutConstraint.Attribute.leading,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                             attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                             constant: 0)
        
        
        
        let rtctimer2viewtrailConstraint = NSLayoutConstraint(item:
                                                                rtctimer2view, attribute: NSLayoutConstraint.Attribute.trailing,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                              attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                              constant: 0)
        
        
        
        let rtctimer2viewheightConstraint = NSLayoutConstraint(item:
                                                                rtctimer2view, attribute: NSLayoutConstraint.Attribute.height,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 70)
        
        
        
        NSLayoutConstraint.activate([rtctimer2viewtopConstraint,rtctimer2viewleadConstraint,
                                     rtctimer2viewtrailConstraint, rtctimer2viewheightConstraint])
        
        
        
        txtrtctimer2on.backgroundColor = .white
        
        txtrtctimer2on.delegate = self
        
        txtrtctimer2on.layer.borderColor = UIColor.red.cgColor
        
        txtrtctimer2on.font = UIFont(name: "Roboto-Bold", size: 20)
        
        txtrtctimer2on.textAlignment = .center
        
        txtrtctimer2on.textColor = .black
        
        txtrtctimer2on.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtrtctimer2on.translatesAutoresizingMaskIntoConstraints = false
        
        rtctimer2view.addSubview(txtrtctimer2on)
        
        
        
        let txtrtctimer2ontopConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer2on, attribute: NSLayoutConstraint.Attribute.centerY,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer2view,
                                                             attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                             constant: 0)
        
        
        
        let txtrtctimer2onleadConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer2on, attribute: NSLayoutConstraint.Attribute.leading,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer2view,
                                                              attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                              constant: 5)
        
        
        
        let txtrtctimer2ontrailConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer2on, attribute: NSLayoutConstraint.Attribute.width,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 35 / 100))
        
        
        
        let txtrtctimer2onheightConstraint = NSLayoutConstraint(item:
                                                                    txtrtctimer2on, attribute: NSLayoutConstraint.Attribute.height,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtrtctimer2ontopConstraint,txtrtctimer2onleadConstraint,
                                     txtrtctimer2ontrailConstraint,txtrtctimer2onheightConstraint])
        
        
        
        
        
        
        
        txtrtctimer2off.backgroundColor = .white
        
        txtrtctimer2off.delegate = self
        
        txtrtctimer2off.layer.borderColor = UIColor.red.cgColor
        
        txtrtctimer2off.font = UIFont(name: "Roboto-Bold", size: 20)
        
        txtrtctimer2off.textAlignment = .center
        
        txtrtctimer2off.textColor = .black
        
        txtrtctimer2off.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtrtctimer2off.translatesAutoresizingMaskIntoConstraints = false
        
        rtctimer2view.addSubview(txtrtctimer2off)
        
        
        
        let txtrtctimer2offtopConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer2off, attribute: NSLayoutConstraint.Attribute.centerY,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer2view,
                                                              attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                              constant: 0)
        
        
        
        let txtrtctimer2offleadConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer2off, attribute: NSLayoutConstraint.Attribute.leading,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer2view,
                                                               attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                               constant: (view.frame.size.width * 45 / 100))
        
        
        
        let txtrtctimer2offtrailConstraint = NSLayoutConstraint(item:
                                                                    txtrtctimer2off, attribute: NSLayoutConstraint.Attribute.width,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                    (view.frame.size.width * 35 / 100))
        
        
        
        let txtrtctimer2offheightConstraint = NSLayoutConstraint(item:
                                                                    txtrtctimer2off, attribute: NSLayoutConstraint.Attribute.height,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtrtctimer2offtopConstraint,txtrtctimer2offleadConstraint,
                                     txtrtctimer2offtrailConstraint,txtrtctimer2offheightConstraint])
        
        
        
        rtctimer2send.backgroundColor = .clear
        
        rtctimer2send.setImage(UIImage(named: "send_settings.png"),
                               for: .normal)
        
        rtctimer2send.addTarget(self, action:
                                    #selector(P2onoffsend(sender:)), for: .touchUpInside)
        
        rtctimer2send.translatesAutoresizingMaskIntoConstraints = false
        
        rtctimer2view.addSubview(rtctimer2send)
        
        
        
        let rtctimer2sendtopConstraint = NSLayoutConstraint(item:
                                                                rtctimer2send, attribute: NSLayoutConstraint.Attribute.centerY,
                                                            relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer2view,
                                                            attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                            constant: 0)
        
        
        
        let rtctimer2sendleadConstraint = NSLayoutConstraint(item:
                                                                rtctimer2send, attribute: NSLayoutConstraint.Attribute.leading,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer2view,
                                                             attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                             constant: (view.frame.size.width * 83 / 100))
        
        
        
        let rtctimer2sendtrailConstraint = NSLayoutConstraint(item:
                                                                rtctimer2send, attribute: NSLayoutConstraint.Attribute.width,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 15 / 100))
        
        
        
        let rtctimer2sendheightConstraint = NSLayoutConstraint(item:
                                                                rtctimer2send, attribute: NSLayoutConstraint.Attribute.height,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant:
                                                                view.frame.size.width * 15 / 100)
        
        
        
        NSLayoutConstraint.activate([rtctimer2sendtopConstraint,rtctimer2sendleadConstraint,
                                     rtctimer2sendtrailConstraint, rtctimer2sendheightConstraint])
        
        
        
        rtctimer3view.backgroundColor = UIColor(red: 233/255, green:
                                                    237/255, blue: 241/255, alpha: 1)
        
        rtctimer3view.layer.borderWidth = 1.0
        
        rtctimer3view.layer.borderColor = UIColor.white.cgColor
        
        rtctimer3view.layer.cornerRadius = 5.0
        
        rtctimer3view.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(rtctimer3view)
        
        
        
        let rtctimer3viewtopConstraint = NSLayoutConstraint(item:
                                                                rtctimer3view, attribute: NSLayoutConstraint.Attribute.top, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: rtctimer2view, attribute:
                                                                NSLayoutConstraint.Attribute.top, multiplier: 1, constant: 70)
        
        
        
        let rtctimer3viewleadConstraint = NSLayoutConstraint(item:
                                                                rtctimer3view, attribute: NSLayoutConstraint.Attribute.leading,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                             attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                             constant: 0)
        
        
        
        let rtctimer3viewtrailConstraint = NSLayoutConstraint(item:
                                                                rtctimer3view, attribute: NSLayoutConstraint.Attribute.trailing,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                              attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                              constant: 0)
        
        
        
        let rtctimer3viewheightConstraint = NSLayoutConstraint(item:
                                                                rtctimer3view, attribute: NSLayoutConstraint.Attribute.height,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 70)
        
        
        
        NSLayoutConstraint.activate([rtctimer3viewtopConstraint,rtctimer3viewleadConstraint,
                                     rtctimer3viewtrailConstraint, rtctimer3viewheightConstraint])
        
        
        
        txtrtctimer3on.backgroundColor = .white
        
        txtrtctimer3on.delegate = self
        
        txtrtctimer3on.layer.borderColor = UIColor.red.cgColor
        
        txtrtctimer3on.font = UIFont(name: "Roboto-Bold", size: 20)
        
        txtrtctimer3on.textAlignment = .center
        
        txtrtctimer3on.textColor = .black
        
        txtrtctimer3on.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtrtctimer3on.translatesAutoresizingMaskIntoConstraints = false
        
        rtctimer3view.addSubview(txtrtctimer3on)
        
        
        
        let txtrtctimer3ontopConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer3on, attribute: NSLayoutConstraint.Attribute.centerY,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer3view,
                                                             attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                             constant: 0)
        
        
        
        let txtrtctimer3onleadConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer3on, attribute: NSLayoutConstraint.Attribute.leading,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer3view,
                                                              attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                              constant: 5)
        
        
        
        let txtrtctimer3ontrailConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer3on, attribute: NSLayoutConstraint.Attribute.width,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 35 / 100))
        
        
        
        let txtrtctimer3onheightConstraint = NSLayoutConstraint(item:
                                                                    txtrtctimer3on, attribute: NSLayoutConstraint.Attribute.height,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtrtctimer3ontopConstraint,txtrtctimer3onleadConstraint,
                                     txtrtctimer3ontrailConstraint,txtrtctimer3onheightConstraint])
        
        
        
        txtrtctimer3off.backgroundColor = .white
        
        txtrtctimer3off.delegate = self
        
        txtrtctimer3off.layer.borderColor = UIColor.red.cgColor
        
        txtrtctimer3off.font = UIFont(name: "Roboto-Bold", size: 20)
        
        txtrtctimer3off.textAlignment = .center
        
        txtrtctimer3off.textColor = .black
        
        txtrtctimer3off.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtrtctimer3off.translatesAutoresizingMaskIntoConstraints = false
        
        rtctimer3view.addSubview(txtrtctimer3off)
        
        
        
        let txtrtctimer3offtopConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer3off, attribute: NSLayoutConstraint.Attribute.centerY,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer3view,
                                                              attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                              constant: 0)
        
        
        
        let txtrtctimer3offleadConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer3off, attribute: NSLayoutConstraint.Attribute.leading,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer3view,
                                                               attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                               constant: (view.frame.size.width * 45 / 100))
        
        
        
        let txtrtctimer3offtrailConstraint = NSLayoutConstraint(item:
                                                                    txtrtctimer3off, attribute: NSLayoutConstraint.Attribute.width,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                    (view.frame.size.width * 35 / 100))
        
        
        
        let txtrtctimer3offheightConstraint = NSLayoutConstraint(item:
                                                                    txtrtctimer3off, attribute: NSLayoutConstraint.Attribute.height,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtrtctimer3offtopConstraint,txtrtctimer3offleadConstraint,
                                     txtrtctimer3offtrailConstraint,txtrtctimer3offheightConstraint])
        
        
        
        rtctimer3send.backgroundColor = .clear
        
        rtctimer3send.setImage(UIImage(named: "send_settings.png"),
                               for: .normal)
        
        rtctimer3send.addTarget(self, action:
                                    #selector(P3onoffsend(sender:)), for: .touchUpInside)
        
        rtctimer3send.translatesAutoresizingMaskIntoConstraints = false
        
        rtctimer3view.addSubview(rtctimer3send)
        
        
        
        let rtctimer3sendtopConstraint = NSLayoutConstraint(item:
                                                                rtctimer3send, attribute: NSLayoutConstraint.Attribute.centerY,
                                                            relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer3view,
                                                            attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                            constant: 0)
        
        
        
        let rtctimer3sendleadConstraint = NSLayoutConstraint(item:
                                                                rtctimer3send, attribute: NSLayoutConstraint.Attribute.leading,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer3view,
                                                             attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                             constant: (view.frame.size.width * 83 / 100))
        
        
        
        let rtctimer3sendtrailConstraint = NSLayoutConstraint(item:
                                                                rtctimer3send, attribute: NSLayoutConstraint.Attribute.width,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 15 / 100))
        
        
        
        let rtctimer3sendheightConstraint = NSLayoutConstraint(item:
                                                                rtctimer3send, attribute: NSLayoutConstraint.Attribute.height,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant:
                                                                view.frame.size.width * 15 / 100)
        
        
        
        NSLayoutConstraint.activate([rtctimer3sendtopConstraint,rtctimer3sendleadConstraint,
                                     rtctimer3sendtrailConstraint, rtctimer3sendheightConstraint])
        
        
        
        rtctimer4view.backgroundColor = UIColor(red: 233/255, green:
                                                    237/255, blue: 241/255, alpha: 1)
        
        rtctimer4view.layer.borderWidth = 1.0
        
        rtctimer4view.layer.borderColor = UIColor.white.cgColor
        
        rtctimer4view.layer.cornerRadius = 5.0
        
        rtctimer4view.translatesAutoresizingMaskIntoConstraints = false
        
        contentview.addSubview(rtctimer4view)
        
        
        
        let rtctimer4viewtopConstraint = NSLayoutConstraint(item:
                                                                rtctimer4view, attribute: NSLayoutConstraint.Attribute.top, relatedBy:
                                                                NSLayoutConstraint.Relation.equal, toItem: rtctimer3view, attribute:
                                                                NSLayoutConstraint.Attribute.top, multiplier: 1, constant: 70)
        
        
        
        let rtctimer4viewleadConstraint = NSLayoutConstraint(item:
                                                                rtctimer4view, attribute: NSLayoutConstraint.Attribute.leading,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                             attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                             constant: 0)
        
        
        
        let rtctimer4viewtrailConstraint = NSLayoutConstraint(item:
                                                                rtctimer4view, attribute: NSLayoutConstraint.Attribute.trailing,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: contentview,
                                                              attribute: NSLayoutConstraint.Attribute.trailing, multiplier: 1,
                                                              constant: 0)
        
        
        
        let rtctimer4viewheightConstraint = NSLayoutConstraint(item:
                                                                rtctimer4view, attribute: NSLayoutConstraint.Attribute.height,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 70)
        
        
        
        NSLayoutConstraint.activate([rtctimer4viewtopConstraint,rtctimer4viewleadConstraint,
                                     rtctimer4viewtrailConstraint, rtctimer4viewheightConstraint])
        
        
        
        txtrtctimer4on.backgroundColor = .white
        
        txtrtctimer4on.delegate = self
        
        txtrtctimer4on.layer.borderColor = UIColor.red.cgColor
        
        txtrtctimer4on.font = UIFont(name: "Roboto-Bold", size: 20)
        
        txtrtctimer4on.textAlignment = .center
        
        txtrtctimer4on.textColor = .black
        
        txtrtctimer4on.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtrtctimer4on.translatesAutoresizingMaskIntoConstraints = false
        
        rtctimer4view.addSubview(txtrtctimer4on)
        
        
        
        let txtrtctimer4ontopConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer4on, attribute: NSLayoutConstraint.Attribute.centerY,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer4view,
                                                             attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                             constant: 0)
        
        
        
        let txtrtctimer4onleadConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer4on, attribute: NSLayoutConstraint.Attribute.leading,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer4view,
                                                              attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                              constant: 5)
        
        
        
        let txtrtctimer4ontrailConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer4on, attribute: NSLayoutConstraint.Attribute.width,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 35 / 100))
        
        
        
        let txtrtctimer4onheightConstraint = NSLayoutConstraint(item:
                                                                    txtrtctimer4on, attribute: NSLayoutConstraint.Attribute.height,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtrtctimer4ontopConstraint,txtrtctimer4onleadConstraint,
                                     txtrtctimer4ontrailConstraint,txtrtctimer4onheightConstraint])
        
        
        
        txtrtctimer4off.backgroundColor = .white
        
        txtrtctimer4off.delegate = self
        
        txtrtctimer4off.layer.borderColor = UIColor.red.cgColor
        
        txtrtctimer4off.font = UIFont(name: "Roboto-Bold", size: 20)
        
        txtrtctimer4off.textAlignment = .center
        
        txtrtctimer4off.textColor = .black
        
        txtrtctimer4off.attributedPlaceholder =
        NSAttributedString(string:"HH:MM:SS",
                           attributes:[NSAttributedString.Key.foregroundColor: UIColor.darkGray])
        
        txtrtctimer4off.translatesAutoresizingMaskIntoConstraints = false
        
        rtctimer4view.addSubview(txtrtctimer4off)
        
        
        
        let txtrtctimer4offtopConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer4off, attribute: NSLayoutConstraint.Attribute.centerY,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer4view,
                                                              attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                              constant: 0)
        
        
        
        let txtrtctimer4offleadConstraint = NSLayoutConstraint(item:
                                                                txtrtctimer4off, attribute: NSLayoutConstraint.Attribute.leading,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer4view,
                                                               attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                               constant: (view.frame.size.width * 45 / 100))
        
        
        
        let txtrtctimer4offtrailConstraint = NSLayoutConstraint(item:
                                                                    txtrtctimer4off, attribute: NSLayoutConstraint.Attribute.width,
                                                                relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                    (view.frame.size.width * 35 / 100))
        
        
        
        let txtrtctimer4offheightConstraint = NSLayoutConstraint(item:
                                                                    txtrtctimer4off, attribute: NSLayoutConstraint.Attribute.height,
                                                                 relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                    NSLayoutConstraint.Attribute.height, multiplier: 1, constant: 40)
        
        
        
        NSLayoutConstraint.activate([txtrtctimer4offtopConstraint,txtrtctimer4offleadConstraint,
                                     txtrtctimer4offtrailConstraint,txtrtctimer4offheightConstraint])
        
        
        
        rtctimer4send.backgroundColor = .clear
        
        rtctimer4send.setImage(UIImage(named: "send_settings.png"),
                               for: .normal)
        
        rtctimer4send.addTarget(self, action:
                                    #selector(P4onoffsend(sender:)), for: .touchUpInside)
        
        rtctimer4send.translatesAutoresizingMaskIntoConstraints = false
        
        rtctimer4view.addSubview(rtctimer4send)
        
        
        
        let rtctimer4sendtopConstraint = NSLayoutConstraint(item:
                                                                rtctimer4send, attribute: NSLayoutConstraint.Attribute.centerY,
                                                            relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer4view,
                                                            attribute: NSLayoutConstraint.Attribute.centerY, multiplier: 1,
                                                            constant: 0)
        
        
        
        let rtctimer4sendleadConstraint = NSLayoutConstraint(item:
                                                                rtctimer4send, attribute: NSLayoutConstraint.Attribute.leading,
                                                             relatedBy: NSLayoutConstraint.Relation.equal, toItem: rtctimer4view,
                                                             attribute: NSLayoutConstraint.Attribute.leading, multiplier: 1,
                                                             constant: (view.frame.size.width * 83 / 100))
        
        
        
        let rtctimer4sendtrailConstraint = NSLayoutConstraint(item:
                                                                rtctimer4send, attribute: NSLayoutConstraint.Attribute.width,
                                                              relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.width, multiplier: 1, constant:
                                                                (view.frame.size.width * 15 / 100))
        
        
        
        let rtctimer4sendheightConstraint = NSLayoutConstraint(item:
                                                                rtctimer4send, attribute: NSLayoutConstraint.Attribute.height,
                                                               relatedBy: NSLayoutConstraint.Relation.equal, toItem: nil, attribute:
                                                                NSLayoutConstraint.Attribute.height, multiplier: 1, constant:
                                                                view.frame.size.width * 15 / 100)
        
        
        
        NSLayoutConstraint.activate([rtctimer4sendtopConstraint,rtctimer4sendleadConstraint,
                                     rtctimer4sendtrailConstraint, rtctimer4sendheightConstraint])
        
        if(modelid == 27)
            
        {
            
            cycliconolbl.text = "Motor1 Time"
            
            cyclicofflbl.text = "Motor2 Time"
            
        }
        
        
        
    }
    
    
    
    override func viewWillAppear(_ animated: Bool)
    
    {
        
        self.navigationController?.setNavigationBarHidden(true, animated: false)
        
        
        
    }
    
    override var prefersStatusBarHidden: Bool
    
    {
        
        return false
        
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        
        self.navigationController?.setNavigationBarHidden(true, animated: false)
        
    }
    
    
    
    
    
    override func viewDidLayoutSubviews()
    
    {
        
        
        
        super.viewDidLayoutSubviews()
        
        borderview(txtdelayTimer)
        
        borderview(txtdelayTimer)
        
        
    }
    
    //MARK:- Button Action
    
    @objc func datepickerAction()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "hh:mm:ss"
        
        let text = String(format: "%02d:%02d:%02d", hour,minutes,seconds)
        
        txtdelayTimer.text = text
        
        
        
    }
    
    @objc func backaction(sender: UIButton)
    
    {
        
        self.navigationController?.popViewController(animated: true)
        
    }
    
    @objc func messageReader(sender: UIButton)
    
    {
        
        let date = Date()
        
        let format = DateFormatter()
        
        format.dateFormat = "yyyy-MM-dd"
        
        let toDate = format.string(from: date)
        
        let lastMonthDate = Calendar.current.date(byAdding: .day,
                                                  value: -5, to: date)
        
        let fromDate = format.string(from: lastMonthDate!)
        
        let vc = last50msg()
        
        vc.userID = self.userID
        
        vc.controllerID = self.controllerID
        
        vc.fromDate = toDate
        
        vc.toDate = toDate
        
        self.navigationController?.pushViewController(vc, animated: true)
        
        
        
    }
    
    @objc func startcapacitioronoff(sender:UIButton)
    
    {
        
        
        
        if(sender.tag == 1)
            
        {
            
            if(toggleststr1 == "0")
                
            {
                
                cyclicviewswitch.setImage(UIImage(named:
                                                    "settings_toggle_on.png"), for: .normal)
                
                toggleststr1  = "1"
                
                
                
            }
            
            else
            
            {
                
                cyclicviewswitch.setImage(UIImage(named:
                                                    "settings_toggle_off.png"), for: .normal)
                
                toggleststr1  = "0"
                
            }
            
        }
        
        
        
        else if(sender.tag == 2)
                
        {
            
            
            
            if(toggleststr2 == "0")
                
            {
                
                maximunrunswitch.setImage(UIImage(named:
                                                    "settings_toggle_on.png"), for: .normal)
                
                toggleststr2 =  "1"
                
            }
            
            else
            
            {
                
                maximunrunswitch.setImage(UIImage(named:
                                                    "settings_toggle_off.png"), for: .normal)
                
                toggleststr2 =  "0"
                
            }
            
        }
        
        else if(sender.tag == 3)
                
        {
            
            
            
            if(toggleststr3 == "0")
                
            {
                
                nightlightswitch.setImage(UIImage(named:
                                                    "settings_toggle_on.png"), for: .normal)
                
                toggleststr3 = "1"
                
            }
            
            else
            
            {
                
                nightlightswitch.setImage(UIImage(named:
                                                    "settings_toggle_off.png"), for: .normal)
                
                toggleststr3 = "0"
                
            }
            
        }
        
        
        
        else if(sender.tag == 4)
                
        {
            
            
            
            if(toggleststr4 == "0")
                
            {
                
                RTCswitch.setImage(UIImage(named:
                                            "settings_toggle_on.png"), for: .normal)
                
                toggleststr4 = "1"
                
                
                
            }
            
            else
            
            {
                
                RTCswitch.setImage(UIImage(named:
                                            "settings_toggle_off.png"), for: .normal)
                
                toggleststr4 = "0"
                
            }
            
        }
        
        else
        
        {
            
            print("Switch Not Available")
            
        }
        
        
        
        
        
    }
    
    @objc func onoffsend(sender:UIButton)
    
    {
        
        if(sender.tag == 1)
            
        {
            
            if(toggleststr1 == "1")
                
            {
                
                togglests1 = "1"
                
                sentsms = "CYCLICON"
                
            }
            
            else
            
            {
                
                togglests1 = "0"
                
                sentsms = "CYCLICOF"
                
            }
            
        }
        
        
        
        else if(sender.tag == 2)
                
        {
            
            
            
            if(toggleststr2 == "1")
                
            {
                
                togglests2 = "1"
                
                sentsms = "MAXTIMON"
                
            }
            
            else
            
            {
                
                togglests2 = "0"
                
                sentsms = "MAXTIMOF"
                
            }
            
        }
        
        else if(sender.tag == 3)
                
        {
            
            
            
            if(toggleststr3 == "1")
                
            {
                
                togglests3 = "1"
                
                sentsms = "NIGHTLIGHTRTCON"
                
            }
            
            else
            
            {
                
                togglests3 = "0"
                
                sentsms = "NIGHTLIGHTRTCOF"
                
            }
            
        }
        
        
        
        else if(sender.tag == 4)
                
        {
            
            
            
            if(toggleststr4 == "1")
                
            {
                
                
                
                togglests4 = "1"
                
                sentsms = "RTCON"
                
            }
            
            else
            
            {
                
                
                
                togglests4 = "0"
                
                sentsms = "RTCOF"
                
            }
            
        }
        
        self.sendaction()
        
    }
    
    
    
    @objc func ondelaysend(sender:UIButton)
    
    {
        
        onDelayTimestr = txtdelayTimer.text ?? "00:00:00"
        
        let temp = onDelayTimestr.replacingOccurrences(of: ":", with: "")
        
        let hrsString = String(format:"MAXTIM%@",temp)
        
        sentsms = hrsString
        
        self.sendaction()
        
    }
    
    @objc func cycliconoffsend(sender:UIButton)
    
    {
        
        cycliconstr = txtcyclicon.text ?? cyclicon
        
        cyclicoffstr = txtcyclicoff.text ?? cyclicoff
        
        let temp1 = cycliconstr.replacingOccurrences(of: ":", with: "")
        
        let temp2 = cyclicoffstr.replacingOccurrences(of: ":", with: "")
        
        let hrsString = String(format:"CYCLICTIMONOF,%@,%@",temp1,temp2)
        
        sentsms = hrsString
        
        self.sendaction()
        
    }
    
    @objc func dryrunrstsend(sender:UIButton)
    
    {
        
        dryrunm1str = txtdryrsttxtm1.text ?? dryrunm1
        
        dryrunm2str = txtdryrsttxtm2.text ?? dryrunm2
        
        let temp1 = dryrunm1str.replacingOccurrences(of: ":", with: "")
        
        let temp2 = dryrunm2str.replacingOccurrences(of: ":", with: "")
        
        let hrsString = String(format:"DRRESTARTTIM,%@,%@",temp1,temp2)
        
        sentsms = hrsString
        
        self.sendaction()
        
        
        
    }
    
    
    
    @objc func nightlightonoffsend(sender:UIButton)
    
    {
        
        nightlightfromstr = txtnighton.text ?? nightlightfrom
        
        nightlighttostr = txtnightoff.text ?? nightlightto
        
        let temp1 = nightlightfromstr.replacingOccurrences(of: ":", with: "")
        
        let temp2 = nightlighttostr.replacingOccurrences(of: ":", with: "")
        
        let hrsString = String(format:"NIGHTLIGHTRTCTIM,%@,%@",temp1,temp2)
        
        sentsms = hrsString
        
        self.sendaction()
        
    }
    
    
    
    @objc func P1onoffsend(sender:UIButton)
    
    {
        
        p1onstr = txtrtctimer1on.text ?? p1on
        
        p1offstr = txtrtctimer1off.text ?? p1off
        
        let temp1 = p1onstr.replacingOccurrences(of: ":", with: "")
        
        let temp2 = p1offstr.replacingOccurrences(of: ":", with: "")
        
        let hrsString = String(format:"RTCTIMONOF1,%@,%@",temp1,temp2)
        
        sentsms = hrsString
        
        self.sendaction()
        
    }
    
    
    
    @objc func P2onoffsend(sender:UIButton)
    
    {
        
        p2onstr = txtrtctimer2on.text ?? p2on
        
        p2offstr = txtrtctimer2off.text ?? p2off
        
        let temp1 = p2onstr.replacingOccurrences(of: ":", with: "")
        
        let temp2 = p2offstr.replacingOccurrences(of: ":", with: "")
        
        let hrsString = String(format:"RTCTIMONOF2,%@,%@",temp1,temp2)
        
        sentsms = hrsString
        
        self.sendaction()
        
    }
    
    
    
    
    
    @objc func P3onoffsend(sender:UIButton)
    
    {
        
        p3onstr = txtrtctimer3on.text ?? p3on
        
        p3offstr = txtrtctimer3off.text ?? p3off
        
        let temp1 = p3onstr.replacingOccurrences(of: ":", with: "")
        
        let temp2 = p3offstr.replacingOccurrences(of: ":", with: "")
        
        let hrsString = String(format:"RTCTIMONOF3,%@,%@",temp1,temp2)
        
        sentsms = hrsString
        
        self.sendaction()
        
    }
    
    
    
    @objc func P4onoffsend(sender:UIButton)
    
    {
        
        p4onstr = txtrtctimer4on.text ?? p4on
        
        p4offstr = txtrtctimer4off.text ?? p4off
        
        let temp1 = p4onstr.replacingOccurrences(of: ":", with: "")
        
        let temp2 = p4offstr.replacingOccurrences(of: ":", with: "")
        
        let hrsString = String(format:"RTCTIMONOF4,%@,%@",temp1,temp2)
        
        sentsms = hrsString
        
        self.sendaction()
        
    }
    
    
    
    
    
    //MARK:- Private Functions
    
    func textFieldDidBeginEditing(_ textField: UITextField)
    
    {
        
        self.pickdUpDyate(textField)
        
    }
    
    
    
    
    
    func pickdUpDyate(_ textField : UITextField)
    
    {
        
        // DatePicker
        
        if(textField == txtnighton || textField == txtnightoff)
            
        {
            
            
            
            self.datePicker = UIPickerView(frame:CGRect(x: 0, y: 0,
                                                        width: self.view.frame.size.width, height: 216))
            
            self.datePicker.backgroundColor = UIColor.lightGray
            
            self.datePicker.showsSelectionIndicator = true
            
            self.datePicker.delegate = self
            
            self.datePicker.dataSource = self
            
            textField.inputView = self.datePicker
            
            self.datePicker.selectRow(hourRowValue, inComponent: 0,
                                      animated: false)//hrs
            
            self.datePicker.selectRow(minsRowValue, inComponent: 1,
                                      animated: false)//mins
            
            
            
            if (self.delay != "" && self.delay != nil &&
                self.delay.length  != 0 )
                
            {
                
                let time = self.delay.components(separatedBy: ":")
                
                let hval  = time[0]
                
                let minval  = time[1]
                
                // var minarr = time[1].components(separatedBy: ":")
                
                
                
                if((Int(hval) != nil) || (Int(minval) != nil)  )
                    
                {
                    
                    self.datePicker.selectRow(Int(hval)!, inComponent:
                                                0, animated: false)
                    
                    self.datePicker.selectRow(Int(minval)!,
                                              inComponent: 1, animated: false)
                    
                }
                
                else
                
                {
                    
                    self.datePicker.selectRow(0, inComponent: 0,
                                              animated: false)
                    
                    self.datePicker.selectRow(0, inComponent: 1,
                                              animated: false)
                    
                }
                
            }
            
            
            
        }
        
        else
        
        {
            
            self.datePicker = UIPickerView(frame:CGRect(x: 0, y: 0,
                                                        width: self.view.frame.size.width, height: 216))
            
            self.datePicker.backgroundColor = UIColor.lightGray
            
            self.datePicker.showsSelectionIndicator = true
            
            self.datePicker.delegate = self
            
            self.datePicker.dataSource = self
            
            textField.inputView = self.datePicker
            
            self.datePicker.selectRow(hourRowValue, inComponent: 0,
                                      animated: false)//hrs
            
            self.datePicker.selectRow(minsRowValue, inComponent: 1,
                                      animated: false)//mins
            
            self.datePicker.selectRow(secsRowValue, inComponent: 2,
                                      animated: false)//secs
            
            
            
            
            
            if (self.delay != "" && self.delay != nil &&
                self.delay.length  != 0 )
                
            {
                
                let time = self.delay.components(separatedBy: ":")
                
                let hval  = time[0]
                
                let minval  = time[1]
                
                let secval  = time[2]
                
                // var minarr = time[1].components(separatedBy: ":")
                
                
                
                if((Int(hval) != nil) || (Int(minval) != nil) ||
                   (Int(secval) != nil) )
                    
                {
                    
                    self.datePicker.selectRow(Int(hval)!, inComponent:
                                                0, animated: false)
                    
                    self.datePicker.selectRow(Int(minval)!,
                                              inComponent: 1, animated: false)
                    
                    self.datePicker.selectRow(Int(secval)!,
                                              inComponent: 2, animated: false)
                    
                }
                
                else
                
                {
                    
                    self.datePicker.selectRow(0, inComponent: 0,
                                              animated: false)
                    
                    self.datePicker.selectRow(0, inComponent: 1,
                                              animated: false)
                    
                    self.datePicker.selectRow(0, inComponent: 2,
                                              animated: false)
                    
                }
                
            }
            
            
            
        }
        
        
        
        
        
        
        
        
        
        // ToolBar
        
        let toolBar = UIToolbar()
        
        toolBar.barStyle = .default
        
        toolBar.barTintColor = colorcode.headerbgcolor
        
        toolBar.tintColor = UIColor.systemYellow
        
        toolBar.sizeToFit()
        
        let attributes: [NSAttributedString.Key : Any] = [ .font:
                                                            UIFont.boldSystemFont(ofSize: 18) ]
        
        var doneButton = UIBarButtonItem()
        
        var spaceButton = UIBarButtonItem()
        
        var cancelButton = UIBarButtonItem()
        
        
        
        
        
        if textField == self.txtdelayTimer
            
        {
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtdelayTimerdone))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
        }
        
        else if textField == self.txtcyclicon
                    
        {
            
            // Adding Button ToolBar
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtcyclicondone))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
            
            
        }
        
        else if textField == self.txtcyclicoff
                    
        {
            
            // Adding Button ToolBar
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtcyclicoffdone))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
            
            
        }
        
        else if textField == self.txtnighton
                    
        {
            
            // Adding Button ToolBar
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtnightondone))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
            
            
        }
        
        else if textField == self.txtnightoff
                    
        {
            
            // Adding Button ToolBar
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtnightoffdone))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
            
            
        }
        
        else if textField == self.txtdryrsttxtm1
                    
        {
            
            // Adding Button ToolBar
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtdryrsttxtm1done))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
            
            
        }
        
        else if textField == self.txtdryrsttxtm2
                    
        {
            
            // Adding Button ToolBar
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtdryrsttxtm2done))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
            
            
        }
        
        else if textField == self.txtrtctimer1on
                    
        {
            
            // Adding Button ToolBar
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtrtctimer1ondone))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
            
            
        }
        
        else if textField == self.txtrtctimer1off
                    
        {
            
            // Adding Button ToolBar
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtrtctimer1offdone))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
            
            
        }
        
        else if textField == self.txtrtctimer2on
                    
        {
            
            // Adding Button ToolBar
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtrtctimer2ondone))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
            
            
        }
        
        else if textField == self.txtrtctimer2off
                    
        {
            
            // Adding Button ToolBar
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtrtctimer2offdone))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
            
            
        }
        
        else if textField == self.txtrtctimer3on
                    
        {
            
            // Adding Button ToolBar
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtrtctimer3ondone))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
            
            
        }
        
        else if textField == self.txtrtctimer3off
                    
        {
            
            // Adding Button ToolBar
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtrtctimer3offdone))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
            
            
        }
        
        else if textField == self.txtrtctimer4on
                    
        {
            
            // Adding Button ToolBar
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtrtctimer4ondone))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
            
            
        }
        
        else if textField == self.txtrtctimer4off
                    
        {
            
            // Adding Button ToolBar
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.txtrtctimer4offdone))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
            
            
        }
        
        
        
        else
        
        {
            
            doneButton = UIBarButtonItem(title: "Done", style: .plain,
                                         target: self, action: #selector(self.cancelClick))
            
            spaceButton = UIBarButtonItem(barButtonSystemItem:
                    .flexibleSpace, target: nil, action: nil)
            
            cancelButton = UIBarButtonItem(title: "Cancel", style:
                    .plain, target: self, action: #selector(self.cancelClick))
            
        }
        
        
        
        doneButton.setTitleTextAttributes(attributes, for: .normal)
        
        cancelButton.setTitleTextAttributes(attributes,for: .normal)
        
        toolBar.setItems([cancelButton, spaceButton, doneButton],
                         animated: false)
        
        toolBar.isUserInteractionEnabled = true
        
        textField.inputAccessoryView = toolBar
        
    }
    
    @objc func doneClicktxtdelayTimer(_ textField : UITextField)
    
    {
        
        if(textField == txtnighton || textField == txtnightoff)
            
        {
            
            let formatter = DateFormatter()
            
            formatter.dateFormat = "HH:mm"
            
            let text = String(format: "%02d:%02d", hour,minutes)
            
            textField.text = text
            
            textField.resignFirstResponder()
            
        }
        
        else{
            
            let formatter = DateFormatter()
            
            formatter.dateFormat = "HH:mm:ss"
            
            let text = String(format: "%02d:%02d:%02d", hour,minutes,seconds)
            
            textField.text = text
            
            textField.resignFirstResponder()
            
        }
        
    }
    
    @objc func cancelClick()
    
    {
        
        txtdelayTimer.resignFirstResponder()
        
        txtcyclicon.resignFirstResponder()
        
        txtcyclicoff.resignFirstResponder()
        
        txtnighton.resignFirstResponder()
        
        txtnightoff.resignFirstResponder()
        
        
        
        txtrtctimer1on.resignFirstResponder()
        
        txtrtctimer2on.resignFirstResponder()
        
        txtrtctimer3on.resignFirstResponder()
        
        txtrtctimer4on.resignFirstResponder()
        
        
        
        txtrtctimer1off.resignFirstResponder()
        
        txtrtctimer2off.resignFirstResponder()
        
        txtrtctimer3off.resignFirstResponder()
        
        txtrtctimer4off.resignFirstResponder()
        
        
        
    }
    
    
    
    
    
    @objc func txtnightondone()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm"
        
        let text = String(format: "%02d:%02d", hour,minutes)
        
        txtnighton.text = text
        
        txtnighton.resignFirstResponder()
        
    }
    
    
    
    @objc func txtdryrsttxtm1done()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm"
        
        let text = String(format: "%02d:%02d", hour,minutes)
        
        txtdryrsttxtm1.text = text
        
        txtdryrsttxtm1.resignFirstResponder()
        
    }
    
    @objc func txtdryrsttxtm2done()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm"
        
        let text = String(format: "%02d:%02d", hour,minutes)
        
        txtdryrsttxtm2.text = text
        
        txtdryrsttxtm2.resignFirstResponder()
        
    }
    
    
    
    
    
    @objc func txtnightoffdone()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm"
        
        let text = String(format: "%02d:%02d", hour,minutes)
        
        txtnightoff.text = text
        
        txtnightoff.resignFirstResponder()
        
    }
    
    @objc func txtcyclicondone()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm:ss"
        
        let text = String(format: "%02d:%02d:%02d", hour,minutes,seconds)
        
        txtcyclicon.text = text
        
        txtcyclicon.resignFirstResponder()
        
    }
    
    
    
    @objc func txtcyclicoffdone()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm:ss"
        
        let text = String(format: "%02d:%02d:%02d", hour,minutes,seconds)
        
        txtcyclicoff.text = text
        
        txtcyclicoff.resignFirstResponder()
        
    }
    
    @objc func txtdelayTimerdone()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm:ss"
        
        let text = String(format: "%02d:%02d:%02d", hour,minutes,seconds)
        
        txtdelayTimer.text = text
        
        txtdelayTimer.resignFirstResponder()
        
    }
    
    
    
    @objc func txtrtctimer1ondone()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm:ss"
        
        let text = String(format: "%02d:%02d:%02d", hour,minutes,seconds)
        
        txtrtctimer1on.text = text
        
        txtrtctimer1on.resignFirstResponder()
        
    }
    
    @objc func txtrtctimer2ondone()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm:ss"
        
        let text = String(format: "%02d:%02d:%02d", hour,minutes,seconds)
        
        txtrtctimer2on.text = text
        
        txtrtctimer2on.resignFirstResponder()
        
    }
    
    @objc func txtrtctimer3ondone()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm:ss"
        
        let text = String(format: "%02d:%02d:%02d", hour,minutes,seconds)
        
        txtrtctimer3on.text = text
        
        txtrtctimer3on.resignFirstResponder()
        
    }
    
    @objc func txtrtctimer4ondone()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm:ss"
        
        let text = String(format: "%02d:%02d:%02d", hour,minutes,seconds)
        
        txtrtctimer4on.text = text
        
        txtrtctimer4on.resignFirstResponder()
        
    }
    
    @objc func txtrtctimer1offdone()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm:ss"
        
        let text = String(format: "%02d:%02d:%02d", hour,minutes,seconds)
        
        txtrtctimer1off.text = text
        
        txtrtctimer1off.resignFirstResponder()
        
    }
    
    @objc func txtrtctimer2offdone()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm:ss"
        
        let text = String(format: "%02d:%02d:%02d", hour,minutes,seconds)
        
        txtrtctimer2off.text = text
        
        txtrtctimer2off.resignFirstResponder()
        
    }
    
    @objc func txtrtctimer3offdone()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm:ss"
        
        let text = String(format: "%02d:%02d:%02d", hour,minutes,seconds)
        
        txtrtctimer3off.text = text
        
        txtrtctimer3off.resignFirstResponder()
        
    }
    
    @objc func txtrtctimer4offdone()
    
    {
        
        let formatter = DateFormatter()
        
        formatter.dateFormat = "HH:mm:ss"
        
        let text = String(format: "%02d:%02d:%02d", hour,minutes,seconds)
        
        txtrtctimer4off.text = text
        
        txtrtctimer4off.resignFirstResponder()
        
    }
    
    
    
    
    
    func borderview(_ textfield:UITextField)
    
    {
        
        let border = CALayer()
        
        let width = CGFloat(2.0)
        
        border.frame = CGRect(x: 0, y: (textfield.frame.size.height -
                                        width) + 1.5, width: textfield.frame.size.width, height: 2)
        
        border.borderWidth = 4.0
        
        border.borderColor = UIColor.black.cgColor
        
        textfield.layer.addSublayer(border)
        
        textfield.layer.masksToBounds = true
        
    }
    
    
    
    //MARK:- Web Services
    
    
    
    
    
    func get()
    
    {
        
        
        
        if(self.jsonResult.count > 0)
            
        {
            
            self.subSettingsID = (self.jsonResult.value(forKey:
                                                            "menuSettingId") as? Int)
            
            self.sendToggle.removeAllObjects()
            
            
            
            print("self.jsonResult",self.jsonResult)
            
            //            if ((self.jsonResult.value(forKey: "sendData") as?
            //String) == "" || (self.jsonResult.value(forKey: "sendData") as?
            //String) == " ")
            
            //            {
            
            //                self.sendToggle.add((self.jsonResult.value(forKey:
            //"templateJson") as? String)!)
            
            //            }
            
            //            else
            
            //            {
            
            self.Receivedata = self.jsonResult.value(forKey:
                                                        "receivedData") as? String ?? ""
            
            self.sendToggle.add((self.jsonResult.value(forKey:
                                                        "sendData") as? String)!)
            
            
            
            if(self.sendToggle.count > 0)
                
            {
                
                let sepString = self.sendToggle.object(at: 0) as! String
                
                
                
                var dictonary:NSDictionary?
                
                if let data = sepString.data(using: String.Encoding.utf8)
                    
                {
                    
                    do
                        
                    {
                        
                        dictonary = try
                        JSONSerialization.jsonObject(with: data, options: []) as?
                        [String:AnyObject] as NSDictionary?
                        
                        print(dictonary)
                        
                        if let myDictionary = dictonary
                            
                        {
                            
                            self.onDelayTime =
                            myDictionary["delayTime"] as? String ?? "00:00:00"
                            
                            self.togglests1 =
                            myDictionary["toggleStatus4"] as? String ?? "0"
                            
                            self.togglests2 =
                            myDictionary["toggleStatus3"] as? String ?? "0"
                            
                            self.togglests3 =
                            myDictionary["toggleStatus2"] as? String ?? "0"
                            
                            self.togglests4 =
                            myDictionary["toggleStatus"] as? String ?? "0"
                            
                            
                            self.nightlightfrom = myDictionary["fromValue"] as? String ?? "00:00"
                            
                            self.nightlightto
                            =  myDictionary["toValue"] as? String ?? "00:00"
                            
                            self.cyclicon =
                            myDictionary["onTime"] as? String ?? "00:00:00"
                            
                            self.cyclicoff =
                            myDictionary["offTime"] as? String ?? "00:00:00"
                            
                            self.type =
                            myDictionary["type"] as? String ?? "93"
                            
                            
                            
                            let PROG =
                            myDictionary["PROG"] as? NSArray
                            
                            self.p1on =
                            (PROG![0] as! NSDictionary).value(forKey: "onTime") as? String ??
                            "00:00:00"
                            
                            self.p2on =
                            (PROG![1] as! NSDictionary).value(forKey: "onTime") as? String ??
                            "00:00:00"
                            
                            self.p3on =
                            (PROG![2] as! NSDictionary).value(forKey: "onTime") as? String ??
                            "00:00:00"
                            
                            self.p4on =
                            (PROG![3] as! NSDictionary).value(forKey: "onTime") as? String ??
                            "00:00:00"
                            
                            
                            
                            self.p1off =
                            (PROG![0] as! NSDictionary).value(forKey: "offTime") as? String ??
                            "00:00:00"
                            
                            self.p2off =
                            (PROG![1] as! NSDictionary).value(forKey: "offTime") as? String ??
                            "00:00:00"
                            
                            self.p3off =
                            (PROG![2] as! NSDictionary).value(forKey: "offTime") as? String ??
                            "00:00:00"
                            
                            self.p4off =
                            (PROG![3] as! NSDictionary).value(forKey: "offTime") as? String ??
                            "00:00:00"
                            
                            if(self.modelid == 27)
                                
                            {
                                
                                self.dryrunm1
                                =  myDictionary["dryrunrstm1"] as? String ?? "00:00"
                                
                                self.dryrunm2
                                =  myDictionary["dryrunrstm2"] as? String ?? "00:00"
                                
                            }
                            
                            else
                            
                            {
                                
                                self.dryrunm1 = "00:00"
                                
                                self.dryrunm2 = "00:00"
                                
                            }
                            
                        }
                        
                        
                        
                    }
                    
                    catch let error as NSError
                            
                    {
                        
                        print(error)
                        
                    }
                    
                }
                
                DispatchQueue.main.async
                
                {
                    
                    
                    
                    self.txtdelayTimer.text = self.onDelayTime
                    
                    self.onDelayTimestr = self.onDelayTime
                    
                    
                    
                    
                    
                    self.txtcyclicon.text = self.cyclicon
                    
                    self.cycliconstr = self.cyclicon
                    
                    self.dryrunm1str = self.dryrunm1
                    
                    self.dryrunm2str = self.dryrunm2
                    
                    self.txtdryrsttxtm1.text = self.dryrunm1
                    
                    self.txtdryrsttxtm2.text = self.dryrunm2
                    
                    
                    
                    self.txtcyclicoff.text = self.cyclicoff
                    
                    self.cyclicoffstr = self.cyclicoff
                    
                    self.txtnighton.text = self.nightlightfrom
                    
                    self.nightlightfromstr = self.nightlightfrom
                    
                    self.txtnightoff.text = self.nightlightto
                    
                    self.nightlighttostr = self.nightlightto
                    
                    self.txtrtctimer1on.text = self.p1on
                    
                    self.txtrtctimer2on.text = self.p2on
                    
                    self.txtrtctimer3on.text = self.p3on
                    
                    self.txtrtctimer4on.text = self.p4on
                    
                    self.txtrtctimer1off.text = self.p1off
                    
                    self.txtrtctimer2off.text = self.p2off
                    
                    self.txtrtctimer3off.text = self.p3off
                    
                    self.txtrtctimer4off.text = self.p4off
                    
                    
                    
                    self.p1onstr = self.p1on
                    
                    self.p2onstr = self.p2on
                    
                    self.p3onstr = self.p3on
                    
                    self.p4onstr = self.p4on
                    
                    
                    
                    self.p1offstr = self.p1off
                    
                    self.p2offstr = self.p2off
                    
                    self.p3offstr = self.p3off
                    
                    self.p4offstr = self.p4off
                    
                    self.toggleststr1 = self.togglests1
                    
                    self.toggleststr2 = self.togglests2
                    
                    self.toggleststr3 = self.togglests3
                    
                    self.toggleststr4 = self.togglests4
                    
                    if(self.togglests1 == "1")
                        
                    {
                        
                        self.cyclicviewswitch.setImage(UIImage(named:
                                                                "settings_toggle_on.png"), for: .normal)
                        
                    }
                    
                    else
                    
                    {
                        
                        self.cyclicviewswitch.setImage(UIImage(named:
                                                                "settings_toggle_off.png"), for: .normal)
                        
                    }
                    
                    
                    
                    if(self.togglests2 == "1")
                        
                    {
                        
                        self.maximunrunswitch.setImage(UIImage(named:
                                                                "settings_toggle_on.png"), for: .normal)
                        
                    }
                    
                    else
                    
                    {
                        
                        self.maximunrunswitch.setImage(UIImage(named:
                                                                "settings_toggle_off.png"), for: .normal)
                        
                    }
                    
                    
                    
                    if(self.togglests3 == "1")
                        
                    {
                        
                        self.nightlightswitch.setImage(UIImage(named:
                                                                "settings_toggle_on.png"), for: .normal)
                        
                    }
                    
                    else
                    
                    {
                        
                        
                        
                        self.nightlightswitch.setImage(UIImage(named:
                                                                "settings_toggle_off.png"), for: .normal)
                        
                    }
                    
                    
                    
                    if(self.togglests4 == "1")
                        
                    {
                        
                        self.RTCswitch.setImage(UIImage(named:
                                                            "settings_toggle_on.png"), for: .normal)
                        
                    }
                    
                    else
                    
                    {
                        
                        self.RTCswitch.setImage(UIImage(named:
                                                            "settings_toggle_off.png"), for: .normal)
                        
                    }
                    
                    
                    
                    self.Refresh()
                    
                }
                
            }
            
        }
        
        
        
    }
    
    
    
    
    
    
    
    @objc func sendaction()
    
    {
        
        if Reachability.isConnectedToNetwork() == true
            
        {
            
            
            
            //      let urlStr = String(format:
            //"http://3.1.62.165:8080/api/v1/user/%@/subuser/0/controller/%d/menu/%d/settings",
            //self.userID,self.controllerID,self.settingsid)
            
            
            
            var urlStr : String
            
            if(shareduserId != 0)
                
            {
                
                urlStr = String(format:
                                    "%@/api/v1/user/%@/subuser/%d/controller/%d/menu/%d/settings",BASEURL.baseurl,self.userID,self.shareduserId,self.controllerID,self.settingsid)
                
            }
            
            else
            
            {
                
                urlStr = String(format:
                                    "%@/api/v1/user/%@/subuser/0/controller/%d/menu/%d/settings",BASEURL.baseurl,
                                self.userID,self.controllerID,self.settingsid)
                
            }
            
            print("url",urlStr)
            
            
            
            let url = URL(string: urlStr)
            
            var request = URLRequest(url: url!)
            
            var arrayOfDictionaries = [[String:String]]()
            
            arrayOfDictionaries.append([ "progNumber" : "1" , "onTime"
                                         : p1onstr ?? "" , "offTime" : p1offstr ?? ""])
            
            arrayOfDictionaries.append([ "progNumber" : "2" , "onTime"
                                         : p2onstr ?? "" , "offTime" : p2offstr ?? ""])
            
            arrayOfDictionaries.append([ "progNumber" : "3" , "onTime"
                                         : p3onstr ?? "" , "offTime" : p3offstr ?? ""])
            
            arrayOfDictionaries.append([ "progNumber" : "4" , "onTime"
                                         : p4onstr ?? "" , "offTime" : p4offstr ?? ""])
            
            
            
            var arrayOfDict = [String : Any]()
            
            if(self.modelid == 27)
                
            {
                
                arrayOfDict =  ["PROG":arrayOfDictionaries, "type" :
                                    type ?? "93", "toggleStatus" : togglests4 , "toggleStatus2" :
                                    togglests3 , "toggleStatus3" : togglests2 , "toggleStatus4" :
                                    togglests1 , "onTime" : cycliconstr , "offTime" : cyclicoffstr ,
                                "delayTime" : onDelayTimestr , "fromValue" : nightlightfromstr ,
                                "toValue" : nightlighttostr, "dryrunrstm1" : dryrunm1str ,
                                "dryrunrstm2" : dryrunm2str  ] as [String : Any]
                
                
            }
            
            else{
                
                arrayOfDict =  ["PROG":arrayOfDictionaries, "type" :
                                    type ?? "93", "toggleStatus" : togglests4 , "toggleStatus2" :
                                    togglests3 , "toggleStatus3" : togglests2 , "toggleStatus4" :
                                    togglests1 , "onTime" : cycliconstr , "offTime" : cyclicoffstr ,
                                "delayTime" : onDelayTimestr , "fromValue" : nightlightfromstr ,
                                "toValue" : nightlighttostr] as [String : Any]
                
            }
            
            
            
            let tempjsonData = try!
            JSONSerialization.data(withJSONObject: arrayOfDict, options:[])
            
            let tempjsonString = NSString(data: tempjsonData,
                                          encoding: String.Encoding.utf8.rawValue)! as String
            
            let params = ["menuSettingId": subSettingsID ?? NSNull(),
                          "sendData": tempjsonString ,"receivedData" : self.Receivedata
                          ,"sentSms": sentsms ?? NSNull()] as Dictionary<String, Any>
            
            print("\n\n\nparams:",params)
            
            let jsonData = try! JSONSerialization.data(withJSONObject:
                                                        params, options:[])
            
            let jsonString = NSString(data: jsonData, encoding:
                                        String.Encoding.utf8.rawValue)! as String
            
            if (modeofoperation == "10" )
                
            {
                
                Mqttcall.publishmsg(sentsms)
                
                
                
                showToast(message: sentsms)
                
            }
            
            request.httpBody = jsonData
            
            request.setValue("application/json", forHTTPHeaderField:
                                "Content-Type")
            
            request.setValue("web", forHTTPHeaderField: "deviceType")
            
            request.httpMethod = "POST"
            
            
            
            let task = URLSession.shared.dataTask(with: request as
                                                  URLRequest, completionHandler: { data, response, error in
                
                if let jsonError = error
                    
                {
                    
                    print("json error is---->",jsonError.localizedDescription)
                    
                }
                
                
                
                if let httpStatus = response as? HTTPURLResponse,
                   httpStatus.statusCode == 200
                    
                {
                    
                    do
                        
                    {
                        
                        let jsonData = data
                        
                        let jsonResult1 = try
                        (JSONSerialization.jsonObject(with: jsonData!, options:
                                .mutableContainers) as! NSDictionary)
                        
                        let code1 =
                        jsonResult1.value(forKey: "code") as! Int
                        
                        let msg =
                        jsonResult1.value(forKey: "message") as! String
                        
                        if code1 == 200
                            
                        {
                            
                            DispatchQueue.main.async
                            
                            {
                                
                                
                                
                                let alertcontrolserver1 =
                                UIAlertController.init(title : nil, message :msg, preferredStyle:
                                        .alert)
                                
                                let okbtn =
                                UIAlertAction(title: "OK", style: .default, handler: nil)
                                
                                alertcontrolserver1.addAction(okbtn)
                                
                                
                                self.present(alertcontrolserver1, animated: true, completion: nil)
                                
                            }
                            
                        }
                        
                    }
                    
                    catch let error
                            
                    {
                        
                        print(error.localizedDescription)
                        
                    }
                    
                }
                
                
                
                else
                
                {
                    
                    let alertcontrol = UIAlertController.init(title :
                                                                nil, message : "Server Interrupted", preferredStyle: .alert)
                    
                    let okbtn = UIAlertAction(title: "OK", style:
                            .default, handler: nil)
                    
                    alertcontrol.addAction(okbtn)
                    
                    self.present(alertcontrol,animated : true,completion: nil)
                    
                }
                
                
                
            })
            
            task.resume()
            
            
            
        }
        
        else
        
        {
            
            let alertcontrol = UIAlertController.init(title : "Not yetconnected", message : "Please check your internet connection",
                                                      preferredStyle: .alert)
            
            let okbtn = UIAlertAction(title: "OK", style: .default,
                                      handler: nil)
            
            alertcontrol.addAction(okbtn)
            
            self.present(alertcontrol,animated : true,completion: nil)
            
        }
        
    }
    
    
    
    
    
}



extension TimerSettings1:UIPickerViewDelegate,UIPickerViewDataSource

{
    
    func numberOfComponents(in pickerView: UIPickerView) -> Int
    
    {
        
        return 3
        
    }
    
    func pickerView(_ pickerView: UIPickerView,
                    numberOfRowsInComponent component: Int) -> Int
    
    {
        
        switch component
        
        {
            
        case 0:
            
            return 24
            
        case 1,2:
            
            return 60
            
        default:
            
            return 0
            
        }
        
    }
    
    
    
    func pickerView(_ pickerView: UIPickerView, widthForComponent
                    component: Int) -> CGFloat
    
    {
        
        return datePicker.frame.size.width/3
        
    }
    
    
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int,
                    forComponent component: Int) -> String?
    
    {
        
        switch component
        
        {
            
        case 0:
            
            return "\(row) hrs"
            
        case 1:
            
            return "\(row) mins"
            
        case 2:
            
            return "\(row) secs"
            
        default:
            
            return ""
            
        }
        
    }
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int,
                    inComponent component: Int)
    
    {
        
        switch component
        
        {
            
        case 0:
            
            hourRowValue = row
            
            hour = row
            
        case 1:
            
            minsRowValue = row
            
            minutes = row
            
        case 2:
            
            secsRowValue = row
            
            seconds = row
            
        default:
            
            break;
            
        }
        
    }
    
}
